fileName,RevisionId,Date,Author,Comment
"./lib/build/jdiff/Null.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./lib/build/jdiff/Null.java","e0359ad38f79c9e8f9a7321e2336eacb3fa0c6d2","Sun, 31 Oct 2010 20:39:41 +0000","sberlin","add jdiff build packages, update build.properties for struts2, update build.xml to include a jdiff target & fix up javadoc target, add a new uploadApiDiffs script, update uploadJavadocs script."
"./core/src/com/google/inject/util/Providers.java","4754a22f265ad638d5484d12219515bd663272d0","Sat, 3 May 2014 00:40:05 -0400","Sam Berlin","Add equals/hashCode to Providers.guicify(...) results. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65072672"
"./core/src/com/google/inject/util/Providers.java","14e2703cd15b0ac745a0df80d25800692d8c727e","Sat, 3 May 2014 00:39:35 -0400","Sam Berlin","Implement hashCode and equals on type returned by Providers.of(...). There doesn't seem to be any reason *not* to provide these methods, and it means downstream code that does"
"./core/src/com/google/inject/util/Providers.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/util/Providers.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/util/Providers.java","16f8b0fdf6f1993f6d5d714d86fd455065301474","Thu, 9 Dec 2010 14:18:42 +0000","sberlin","fix issue 578, Providers.guicify loses injection points from the delegate."
"./core/src/com/google/inject/util/Providers.java","d00bb052f3c46d528db507607898530886de0f3b","Thu, 9 Dec 2010 04:15:04 +0000","sberlin","add missing @since tag."
"./core/src/com/google/inject/util/Providers.java","a523ea5e25e18b348097f587a7f150b987f440b3","Thu, 9 Dec 2010 03:00:02 +0000","sberlin","rm jsr330, move the one method into Providers."
"./core/src/com/google/inject/util/Providers.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/util/Modules.java","ebe9f053ab2431f8f22f6d892cffadef4b10479c","Fri, 6 Dec 2013 17:08:25 -0500","Sam Berlin","Re-committed the rolled back CL, after fixing internal projects."
"./core/src/com/google/inject/util/Modules.java","a4c16e8b45261e23e1c35d5fdce9b57357b16d1f","Fri, 6 Dec 2013 17:06:40 -0500","Sam Berlin","Rolled back commit -- broke some internal projects."
"./core/src/com/google/inject/util/Modules.java","9b268e4467753f31eb6dfeb4001e76e32b01f5a3","Fri, 6 Dec 2013 17:04:48 -0500","Sam Berlin","Pass the correct stage to Modules.override, so currentStage() works. Fixes issue 784 -- patch thanks to Tavian Barnes. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57755697"
"./core/src/com/google/inject/util/Modules.java","a9228269b4d6e7b74a6354f179babe723c00f387","Tue, 12 Nov 2013 23:06:04 -0800","Christian Edward Gruber","Make named classes for anonymous Modules so they appear prettier (and useful) in error messages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54796862"
"./core/src/com/google/inject/util/Modules.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/util/Modules.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/util/Modules.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/util/Modules.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/util/Modules.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/util/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/util/Types.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/util/Types.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/PrivateBinder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/MembersInjectorLookup.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/MembersInjectorLookup.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/MembersInjectorLookup.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/MembersInjectorLookup.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/MembersInjectorLookup.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/DefaultBindingTargetVisitor.java","338213332308fc9932603b2f4c853a4a7d19cc13","Tue, 12 Nov 2013 23:07:22 -0800","Christian Edward Gruber","Make guice build with javac 8."
"./core/src/com/google/inject/spi/DefaultBindingTargetVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/TypeListenerBinding.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/TypeListenerBinding.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/TypeListenerBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/TypeEncounter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/TypeEncounter.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProvidesMethodBinding.java","29ce12be89584ca1ad671408ecbe0f6c343f9382","Mon, 10 Mar 2014 12:52:01 -0400","Sam Berlin","Add an SPI for @Provides methods (using the extensions SPI) so that users can do more analysis (with the enclosing instance, method, etc..)."
"./core/src/com/google/inject/spi/ExposedBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProvidesMethodTargetVisitor.java","29ce12be89584ca1ad671408ecbe0f6c343f9382","Mon, 10 Mar 2014 12:52:01 -0400","Sam Berlin","Add an SPI for @Provides methods (using the extensions SPI) so that users can do more analysis (with the enclosing instance, method, etc..)."
"./core/src/com/google/inject/spi/ProviderWithDependencies.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/RequireExactBindingAnnotationsOption.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/RequireExactBindingAnnotationsOption.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/RequireExactBindingAnnotationsOption.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/spi/InjectionPoint.java","4daa205dc4fe1d339f91155dde65f3941cbd144c","Sat, 3 May 2014 00:44:06 -0400","Sam Berlin","Ignore synthetic/bridge methods when determining if a method should be injected.  This broke injections for different reasons before & after java8, but the fix is the same for both."
"./core/src/com/google/inject/spi/InjectionPoint.java","4d5804923d55353b214b8e2a45a6416a75665a4d","Fri, 9 Aug 2013 11:06:25 -0700","Christian Edward Gruber","Fix random bitwise | to be a real ||. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50288042"
"./core/src/com/google/inject/spi/InjectionPoint.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/spi/InjectionPoint.java","ee443bce9731bb8da1eb60202f68de4c4c298698","Fri, 9 Sep 2011 21:19:11 +0000","guice.mirrorbot@gmail.com","Fix issue 644.  Print a better error message when requestStaticInjection is called on an interface, fix it so that static injection errors show the source of the static injection."
"./core/src/com/google/inject/spi/InjectionPoint.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/InjectionPoint.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/InjectionPoint.java","dfee9fd5f78c5f1f769713b603e4e92a0b7b01e3","Sat, 30 Oct 2010 14:15:06 +0000","sberlin","issue 531 -- don't let c.g.i.internal.util reference outside its package."
"./core/src/com/google/inject/spi/InjectionPoint.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ElementSource.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/spi/ElementSource.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/ElementSource.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/Dependency.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/Dependency.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/Dependency.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/Elements.java","c5848c0b57ad0f3f09acadff4be80c19d0c7d95f","Fri, 6 Dec 2013 17:05:44 -0500","Sam Berlin","Optimize RecordingBinder.withSource so it doesn't always create a new binder. Fixes issue 776, patch thanks to Stuart McCulloch! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57757534"
"./core/src/com/google/inject/spi/Elements.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/spi/Elements.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/spi/Elements.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/Elements.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/spi/Elements.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/Elements.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/spi/Elements.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/spi/Elements.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/spi/Elements.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/Elements.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/Elements.java","3391af361375eb021e27711bb06cae2a193ccf91","Sun, 12 Jun 2011 22:26:20 +0000","sberlin","remove stray <T>"
"./core/src/com/google/inject/spi/Elements.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/spi/Elements.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/spi/Elements.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/HasDependencies.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/UntargettedBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProviderWithExtensionVisitor.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./core/src/com/google/inject/spi/ProviderWithExtensionVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/DependencyAndSource.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/spi/DependencyAndSource.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/DependencyAndSource.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/DependencyAndSource.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/spi/InjectionRequest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/InjectionRequest.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/InjectionRequest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/InjectionRequest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/InjectionRequest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/InjectionListener.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/InterceptorBinding.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/InterceptorBinding.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/InterceptorBinding.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/spi/InterceptorBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/InterceptorBinding.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/InterceptorBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/PrivateElements.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/PrivateElements.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/LinkedKeyBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/TypeListener.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/StaticInjectionRequest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/StaticInjectionRequest.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/StaticInjectionRequest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/StaticInjectionRequest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/StaticInjectionRequest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/RequireExplicitBindingsOption.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/spi/Toolable.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/Toolable.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/Toolable.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ConstructorBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ConstructorBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProviderBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ElementVisitor.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/spi/ElementVisitor.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/spi/ElementVisitor.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/spi/ElementVisitor.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/spi/ElementVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/BindingScopingVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/BindingScopingVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/BindingTargetVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/TypeConverterBinding.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/spi/TypeConverterBinding.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/TypeConverterBinding.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/TypeConverterBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/TypeConverterBinding.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/TypeConverterBinding.java","6716a71b495e25fb6c499c03ad2d919bedf2ec50","Fri, 19 Nov 2010 02:47:30 +0000","sberlin","a few more @sinces."
"./core/src/com/google/inject/spi/TypeConverterBinding.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/spi/TypeConverterBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/Element.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ScopeBinding.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/ScopeBinding.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/ScopeBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ScopeBinding.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/ScopeBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/InstanceBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/InstanceBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ModuleSource.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/spi/ModuleSource.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/ModuleSource.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/ProvisionListenerBinding.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","91a844c19e6d52877c65b8870d8ffc86acb0d80b","Mon, 17 Oct 2011 00:02:49 +0000","guice.mirrorbot@gmail.com","fix issue 616, thanks for the patch!"
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","b405e0417151915b98c3d2033adb9770336a7bbb","Sun, 16 Oct 2011 22:34:21 +0000","guice.mirrorbot@gmail.com","Fix flaky service test.  The whole AsyncService thing probably should just be rm'd, but fixing the test for now."
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","7e5464ef25b98ea8f1988040d3623b93129ff1f4","Sun, 16 Oct 2011 16:38:42 +0000","sberlin","fix issue 616, thanks for the patch!"
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","6716a71b495e25fb6c499c03ad2d919bedf2ec50","Fri, 19 Nov 2010 02:47:30 +0000","sberlin","a few more @sinces."
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/spi/ConvertedConstantBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/DefaultElementVisitor.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/spi/DefaultElementVisitor.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/spi/DefaultElementVisitor.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/spi/DefaultElementVisitor.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/spi/DefaultElementVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProviderKeyBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/RequireAtInjectOnConstructorsOption.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/RequireAtInjectOnConstructorsOption.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/RequireAtInjectOnConstructorsOption.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/spi/ProviderInstanceBinding.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/spi/ProviderInstanceBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ProviderInstanceBinding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/DefaultBindingScopingVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/DefaultBindingScopingVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/ProvisionListener.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/spi/ProvisionListener.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/spi/ProvisionListener.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ProvisionListener.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/ProvisionListener.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/spi/ProvisionListener.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/spi/ProviderLookup.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./core/src/com/google/inject/spi/ProviderLookup.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/ProviderLookup.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/spi/ProviderLookup.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/ProviderLookup.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/ProviderLookup.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/ProviderLookup.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/DisableCircularProxiesOption.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/spi/Message.java","0e896db46024dc7596302f8622276d1c7df02c6b","Wed, 11 Dec 2013 18:40:58 -0500","Sam Berlin","A Message should have only one source but as it is used in Errors, currently it can have multiple sources. The Message objects is returned from two public methods(Elements#getElements() and Errors#getMessages()) that make any changes in its method declarations difficult. As the first step, I am going to remove all calls to the Message constructor that receives multiple sources from []. So, the only calls will be from Errors that I will deal with separately. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57979416"
"./core/src/com/google/inject/spi/Message.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/spi/Message.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/spi/Message.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/spi/Message.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/spi/TypeConverter.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/ConfigurationException.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/ConfigurationException.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/src/com/google/inject/ConfigurationException.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/ConfigurationException.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/MembersInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Provides.java","7839f29c2559fa100851777a79774e85f0dadeaf","Fri, 9 Aug 2013 11:07:36 -0700","Christian Edward Gruber","Fix typo in comment for Provides annotation. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50518753"
"./core/src/com/google/inject/Provides.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Provides.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/ProvidedBy.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/ProvidedBy.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/TypeLiteral.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/TypeLiteral.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/TypeLiteral.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/TypeLiteral.java","5d5941f9c5a882ac98a3312bd411bde00a1f425f","Thu, 25 Nov 2010 02:06:49 +0000","sberlin","rm documentation that a TypeLiteral with wildcard character (such as List<? extends CharSequence>) doesn't work, add a test that asserts it does work."
"./core/src/com/google/inject/TypeLiteral.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/LinkedBindingBuilder.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/binder/LinkedBindingBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/binder/LinkedBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/ConstantBindingBuilder.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./core/src/com/google/inject/binder/ConstantBindingBuilder.java","ebaa152b131a02b312ecdb37efcf98d07050120d","Mon, 25 Oct 2010 00:58:04 +0000","sberlin","issue 496 -- ConstantBindingBuilder was missing to(byte)."
"./core/src/com/google/inject/binder/ConstantBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/AnnotatedElementBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/AnnotatedBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/AnnotatedConstantBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/binder/ScopedBindingBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/binder/ScopedBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/matcher/Matchers.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/matcher/Matchers.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/matcher/Matchers.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/matcher/Matchers.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/matcher/Matcher.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/matcher/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/matcher/AbstractMatcher.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Binding.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/ScopeAnnotation.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/ScopeAnnotation.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/BindingAnnotation.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/BindingAnnotation.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Exposed.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Exposed.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Scope.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Injector.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Injector.java","95b3f8a316e2ae2dda4d5af4be5a4bdbb892f168","Sun, 20 Feb 2011 22:08:50 +0000","sberlin","issue 282 - mention quirks with optional dependencies, JIT bindings & child injectors in the javadoc."
"./core/src/com/google/inject/Injector.java","30b582e14ad7f9ab64450720be5fce0c9f998312","Fri, 19 Nov 2010 15:50:59 +0000","mcculls","Minor javadoc fix"
"./core/src/com/google/inject/Injector.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/Injector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/AbstractModule.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/AbstractModule.java","f74ee672186bffc687b2accb911344a7021e7ecf","Tue, 18 Oct 2011 16:43:18 -0400","Sam Berlin","Better errors when using binder(), etc. outside of configure()."
"./core/src/com/google/inject/AbstractModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/AbstractModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/AbstractModule.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/AbstractModule.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Scopes.java","d9b62c213e28f42cba6c1c4bf625fc0dc6d0d8e2","Fri, 13 Jan 2012 18:22:09 -0500","Sam Berlin","Do not create a new visitor instance for every call to isSingleton."
"./core/src/com/google/inject/Scopes.java","66094fb9923bb4d1cf109be8915bac4679083169","Fri, 13 Jan 2012 18:21:27 -0500","Sam Berlin","Add isEagerSingleton."
"./core/src/com/google/inject/Scopes.java","05bf8e59221197d8e1b8b04bace4ff5cc34e7336","Tue, 27 Sep 2011 15:37:30 +0000","guice.mirrorbot@gmail.com","Add Scopes.isCircularProxy, for use by Scope implementations.  The basic problem is that somewhere along the line, Guice is breaking the type-safety of <T> in the scope(Key<T>, Provider<T>) method.  This happens when <T> is involved in a circular dependency, and the ConstructionContext creates a circular proxy for a given 'expectedType' of <T> (the type in the parameter where it's being injected).  Expected type is a superclass or superinterface of <T>, not a subclass or subinterface, so if a Scope caches the result of Key<T> -> Provider<T>.get(), and then tries to reuse it, it's possible that we return something that isn't compatible with <T>.  This results in either a ClassCastException (if cglib is involved) or IllegalArgumentException (java reflection) when trying to construct the object, because the parameters don't match the arguments."
"./core/src/com/google/inject/Scopes.java","09ab5f9e6a1d81bb6d4d196b009492f959ca5ceb","Mon, 25 Oct 2010 00:41:10 +0000","sberlin","issue 477 - fix Scopes.isSingleton to navigate through exposed private elements."
"./core/src/com/google/inject/Scopes.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Guice.java","be10b4c6b7a4909ec4eff8a2377a1f1b2d4aa63e","Sun, 16 Oct 2011 23:36:26 +0000","guice.mirrorbot@gmail.com","fix issue 624."
"./core/src/com/google/inject/Guice.java","b405e0417151915b98c3d2033adb9770336a7bbb","Sun, 16 Oct 2011 22:34:21 +0000","guice.mirrorbot@gmail.com","Fix flaky service test.  The whole AsyncService thing probably should just be rm'd, but fixing the test for now."
"./core/src/com/google/inject/Guice.java","56a879c866f7039321331d1f4305619adba527cb","Sun, 16 Oct 2011 16:26:00 +0000","sberlin","fix issue 624."
"./core/src/com/google/inject/Guice.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Guice.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/Guice.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Provider.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Key.java","4ab2a909972c14715e3adcbe9e9acd2c1c403935","Tue, 1 Apr 2014 15:04:07 -0700","Christian Edward Gruber","Memoize Key#toString() to reduce allocations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63557612"
"./core/src/com/google/inject/Key.java","b0aeeda0b5639a0553f0444e85926e4119cf16e0","Wed, 18 Sep 2013 10:58:05 -0700","Christian Edward Gruber","Remove loophole for making non-canonical Keys. This makes the behaviour of Key.get(new TypeLiteral<T>() {}) and new Key<T>() {} the same. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51109122"
"./core/src/com/google/inject/Key.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/Key.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/Key.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Key.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/Key.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/ImplementedBy.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/ImplementedBy.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/OutOfScopeException.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Module.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/CreationException.java","f83bda3587fb8f1df33b6f3ada44d9de8bd93f6c","Sat, 3 May 2014 00:43:10 -0400","Sam Berlin","Update provision & creation exception messages.  The previous messages caused misdiagnosis, as users think "There was a Guice error" when there is an error in user code. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66120881"
"./core/src/com/google/inject/CreationException.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/CreationException.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/CreationException.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Inject.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/Inject.java","2d454682438a7ed743365daca07e93e7226d4a55","Wed, 18 Sep 2013 10:57:35 -0700","Christian Edward Gruber","Fix Inject documentation, as method injection happens after field injection. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50901673"
"./core/src/com/google/inject/Inject.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Inject.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Binder.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/Binder.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/Binder.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/Binder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Binder.java","3391af361375eb021e27711bb06cae2a193ccf91","Sun, 12 Jun 2011 22:26:20 +0000","sberlin","remove stray <T>"
"./core/src/com/google/inject/Binder.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/Binder.java","be2505a424c177c372f7c8a38afbc0cba5cf4c24","Thu, 21 Apr 2011 18:17:15 +0000","sberlin","specify that interceptors are called in the order they are listed in bindInterceptor(Matcher, Matcher, Interceptor...).  add a test that guarantees it."
"./core/src/com/google/inject/Binder.java","ea27c01951aec20a880d410c57d1e5e1204fcb84","Tue, 14 Dec 2010 14:08:21 +0000","sberlin","review comments from jesse."
"./core/src/com/google/inject/Binder.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/Binder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Stage.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/ProvisionException.java","f83bda3587fb8f1df33b6f3ada44d9de8bd93f6c","Sat, 3 May 2014 00:43:10 -0400","Sam Berlin","Update provision & creation exception messages.  The previous messages caused misdiagnosis, as users think "There was a Guice error" when there is an error in user code. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66120881"
"./core/src/com/google/inject/ProvisionException.java","0e896db46024dc7596302f8622276d1c7df02c6b","Wed, 11 Dec 2013 18:40:58 -0500","Sam Berlin","A Message should have only one source but as it is used in Errors, currently it can have multiple sources. The Message objects is returned from two public methods(Elements#getElements() and Errors#getMessages()) that make any changes in its method declarations difficult. As the first step, I am going to remove all calls to the Message constructor that receives multiple sources from []. So, the only calls will be from Errors that I will deal with separately. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57979416"
"./core/src/com/google/inject/ProvisionException.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/ProvisionException.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/ProvisionException.java","405828baafef04878c8b5bd57f90a9740bbef4a6","Sun, 6 Feb 2011 17:59:07 +0000","sberlin","issues 592 & 591, documentation updates."
"./core/src/com/google/inject/ProvisionException.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/util/SourceProvider.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/internal/util/SourceProvider.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/internal/util/SourceProvider.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/internal/util/SourceProvider.java","d9e05457644c7600746f8614f1285d5f1aa49e17","Wed, 26 Jun 2013 14:34:13 -0700","Christian Edward Gruber","Reduce the memory consumption of SourceProvider instances by keeping a reference to the parent object instead of copying all class names to a new object."
"./core/src/com/google/inject/internal/util/SourceProvider.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/util/SourceProvider.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/util/SourceProvider.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/util/Classes.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/util/Classes.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/util/Classes.java","dfee9fd5f78c5f1f769713b603e4e92a0b7b01e3","Sat, 30 Oct 2010 14:15:06 +0000","sberlin","issue 531 -- don't let c.g.i.internal.util reference outside its package."
"./core/src/com/google/inject/internal/util/Classes.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/util/StackTraceElements.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/internal/util/StackTraceElements.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/src/com/google/inject/internal/util/StackTraceElements.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/internal/util/StackTraceElements.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/util/StackTraceElements.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/util/StackTraceElements.java","dfee9fd5f78c5f1f769713b603e4e92a0b7b01e3","Sat, 30 Oct 2010 14:15:06 +0000","sberlin","issue 531 -- don't let c.g.i.internal.util reference outside its package."
"./core/src/com/google/inject/internal/util/StackTraceElements.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/util/LineNumbers.java","57aad211bb85221191216a442812fe1fa5b8bcbb","Tue, 8 Apr 2014 12:26:24 -0400","Sam Berlin","Change Opcodes.ASM4 to Opcodes.ASM5, to work with java8 lambdas.  Also update opensource build to ASM 5.0.1."
"./core/src/com/google/inject/internal/util/LineNumbers.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/util/LineNumbers.java","23030077f4b7446f3284d2094c983836c76f28c3","Wed, 15 May 2013 17:32:52 -0700","Christian Edward Gruber","Upgrade to cglib 3.0 adn ASM 4.0."
"./core/src/com/google/inject/internal/util/LineNumbers.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/util/LineNumbers.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/util/LineNumbers.java","c17c5a9b58d1d0ac0cf77dba0f5b5011a445c610","Mon, 14 Feb 2011 01:01:01 +0000","sberlin","issue 574 - don't freak out on generated classes when trying to get line numbers."
"./core/src/com/google/inject/internal/util/LineNumbers.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/util/Stopwatch.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/BindingImpl.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/internal/BindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/BindingImpl.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/internal/BindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/BindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/EncounterImpl.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/src/com/google/inject/internal/EncounterImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/EncounterImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/EncounterImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ConstructionContext.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","2cc8ce904aff3d46a55cb6b886e975516a923524","Thu, 16 May 2013 10:53:11 -0700","Christian Edward Gruber","Clear context during provision.  Fixes http://code.google.com/p/google-guice/issues/detail?id=743"
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/src/com/google/inject/internal/ProviderInternalFactory.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/ConstantBindingBuilderImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ConstantBindingBuilderImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstantBindingBuilderImpl.java","ebaa152b131a02b312ecdb37efcf98d07050120d","Mon, 25 Oct 2010 00:58:04 +0000","sberlin","issue 496 -- ConstantBindingBuilder was missing to(byte)."
"./core/src/com/google/inject/internal/ConstantBindingBuilderImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Initializer.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/Initializer.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/Initializer.java","9ee53e90374a2253624b2d97860d928fde6c81c0","Mon, 31 Oct 2011 16:34:57 -0400","Sam Berlin","Defer building of error messages for Preconditions.check(State|NotNull|Argument) calls."
"./core/src/com/google/inject/internal/Initializer.java","6b7e7187bd074d3f2df9b04e17fa01e7592f295c","Sun, 16 Oct 2011 22:36:01 +0000","guice.mirrorbot@gmail.com","Fix a very obscure bug where more than one InitializableReference of the same identity could result in an NPE during injector creation if the one that got ejected from the Map was requested for injection from another InitializableReference."
"./core/src/com/google/inject/internal/Initializer.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/Initializer.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/Initializer.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/Initializer.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ScopeBindingProcessor.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/internal/ScopeBindingProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ScopeBindingProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ScopeBindingProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/MembersInjectorImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Nullability.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/Nullability.java","94a685598d98e782471954e2e7b6bdb8220d259a","Fri, 29 Oct 2010 02:44:32 +0000","sberlin","Jesse's suggestion for fixing Nullability -- check the String just for name=="Nullable", but add class==Nullable.class to catch the jarjar'd c.g.i.i.util.Nullable."
"./core/src/com/google/inject/internal/Nullability.java","982f83e9d87049ccfcc2775c4b446c6a6f22d22d","Wed, 27 Oct 2010 02:40:07 +0000","sberlin","fix Nullability to check for "$Nullable" (the jarjar renamed "Nullable"), and fix jarjar to build using asm-3.3 (it was using 3.1, and using 3.3 fixes http://code.google.com/p/jarjar/issues/detail?id=21, where annotations on methods that are remapped are loss)"
"./core/src/com/google/inject/internal/Nullability.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/MethodAspect.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/MethodAspect.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/MethodAspect.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalFlags.java","e1197a962b656e5128cfa01319e42db19c8ffc4b","Tue, 12 Nov 2013 23:06:31 -0800","Christian Edward Gruber","Update Guice's maven build system to run the unit tests in three configurations, representing the three different values for stack-trace inclusion in error messages.  Additionally, modify the open-source InternalFlags to log a warning if a value is passed to the flag that does not correspond to the Enum."
"./core/src/com/google/inject/internal/InternalFlags.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/src/com/google/inject/internal/UntargettedBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/UntargettedBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/UntargettedBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/UntargettedBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/CircularDependencyProxy.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProcessedBindingData.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProcessedBindingData.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/ProcessedBindingData.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProcessedBindingData.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/InjectorShell.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/internal/InjectorShell.java","31d8fbf9934778160de52837ef311f0d26efbbf8","Mon, 9 Dec 2013 14:26:19 -0500","Sam Berlin","Fix issue 723 -- minor optimizations to TypeConverterBindingProcessor. Description in the bug describes this best: TypeConverterBindingProcessor has two responsibilities: 1) prepare built-in type converters for primitives, enums, classes, etc. and 2) process TypeConverter bindings and register them with the containing injector."
"./core/src/com/google/inject/internal/InjectorShell.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/InjectorShell.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/InjectorShell.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InjectorShell.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InjectorShell.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/InjectorShell.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/InjectorShell.java","920731718b6f3505cdfeefeabd789539603de18a","Fri, 11 Mar 2011 00:03:01 +0000","sberlin","fix issue 614 -- admittedly not the prettiest solution, but it works."
"./core/src/com/google/inject/internal/InjectorShell.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/InjectorShell.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Initializable.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/MoreTypes.java","978ed86a76b3c47e8247f6691586b994bcf13dbc","Thu, 16 May 2013 07:49:41 -0700","Christian Edward Gruber","Fix a == vs .equals() bug in MoreTypes."
"./core/src/com/google/inject/internal/MoreTypes.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/MoreTypes.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/MoreTypes.java","dfee9fd5f78c5f1f769713b603e4e92a0b7b01e3","Sat, 30 Oct 2010 14:15:06 +0000","sberlin","issue 531 -- don't let c.g.i.internal.util reference outside its package."
"./core/src/com/google/inject/internal/MoreTypes.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Annotations.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/src/com/google/inject/internal/Annotations.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/internal/Annotations.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/Annotations.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/Annotations.java","c9d97cf1048498269fabbeb0f2ae2a921f53abf8","Wed, 15 Dec 2010 21:42:11 +0000","crazyboblee","Cache annotation lookups."
"./core/src/com/google/inject/internal/Annotations.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ConstructorInjectorStore.java","efa4e9f24a309c38c1356fd43eb76fcbca8d975a","Tue, 13 Sep 2011 17:41:32 +0000","guice.mirrorbot@gmail.com","Fix a bug in the way failed JIT bindings are cleaned up.  Because we removed bindings from the jitBindings Map, it was possible for an Injector to try and recreate the failed JIT binding.  Normally we want this behavior.. but in the case of a circular failed JIT binding, it can lead to a ComputationException from ComputingConcurrentHashMap, because we attempt to create two ConstructorInjectors for the same InjectionPoint recursively."
"./core/src/com/google/inject/internal/ConstructorInjectorStore.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ConstructorInjectorStore.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstructorInjectorStore.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ConstructorInjectorStore.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/MessageProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/MessageProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/FailableCache.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/src/com/google/inject/internal/FailableCache.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/FailableCache.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./core/src/com/google/inject/internal/FailableCache.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","ea27c01951aec20a880d410c57d1e5e1204fcb84","Tue, 14 Dec 2010 14:08:21 +0000","sberlin","review comments from jesse."
"./core/src/com/google/inject/internal/InjectorOptionsProcessor.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/BytecodeGen.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/src/com/google/inject/internal/BytecodeGen.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/BytecodeGen.java","3bdf721ed546315c59098407798b722d20b959b2","Thu, 9 Dec 2010 03:57:44 +0000","sberlin","fix for NO_AOP build."
"./core/src/com/google/inject/internal/BytecodeGen.java","1c6ff880b9a83a833c6fc5fb4fc0e3a15bfb1f80","Thu, 18 Nov 2010 03:59:56 +0000","sberlin","fix issue 508 -- consider method return type when deciding whether to bridge.  patch contributed by stuart."
"./core/src/com/google/inject/internal/BytecodeGen.java","a102c17638ec586de3d6930c8ef794c751d157d6","Tue, 9 Nov 2010 05:35:13 +0000","sberlin","make sure $$EnhancerByGuice$$ & $$FastClassByGuice$$ stay named that way and don't become $$$EnhancerByGuice$$ & $$$FastClassByGuice$$ after jarjar renames the cglib classes."
"./core/src/com/google/inject/internal/BytecodeGen.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./core/src/com/google/inject/internal/BytecodeGen.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Scoping.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/internal/Scoping.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/Scoping.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/Scoping.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/Scoping.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/InternalFactoryToProviderAdapter.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InjectorImpl.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/internal/InjectorImpl.java","ca81e59c8864a19e061fe5fd3c8dece43cbaf847","Tue, 1 Jul 2014 16:52:59 -0400","Sam Berlin","Submitting Stuart McCulloch's patch from https://github.com/sonatype/sisu-guice/blob/master/PATCHES/GUICE_288_decouple_thread_local.patch."
"./core/src/com/google/inject/internal/InjectorImpl.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/src/com/google/inject/internal/InjectorImpl.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/src/com/google/inject/internal/InjectorImpl.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/src/com/google/inject/internal/InjectorImpl.java","c01ba1d84d542110167e7bdb4bb6d522b30055ea","Wed, 18 Sep 2013 10:59:50 -0700","Christian Edward Gruber","Convert an anonymous subclass of ThreadLocal in the implementation of InjectorImpl to a nested class, thus eliminating its implicit parent reference. This implicit parent reference creates some additional work during debugging and is unnecessary. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51925521"
"./core/src/com/google/inject/internal/InjectorImpl.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/InjectorImpl.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/src/com/google/inject/internal/InjectorImpl.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/internal/InjectorImpl.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/InjectorImpl.java","efa4e9f24a309c38c1356fd43eb76fcbca8d975a","Tue, 13 Sep 2011 17:41:32 +0000","guice.mirrorbot@gmail.com","Fix a bug in the way failed JIT bindings are cleaned up.  Because we removed bindings from the jitBindings Map, it was possible for an Injector to try and recreate the failed JIT binding.  Normally we want this behavior.. but in the case of a circular failed JIT binding, it can lead to a ComputationException from ComputingConcurrentHashMap, because we attempt to create two ConstructorInjectors for the same InjectionPoint recursively."
"./core/src/com/google/inject/internal/InjectorImpl.java","5221c15e183cb7029a305766d137d909f77e8941","Fri, 22 Jul 2011 21:13:53 +0000","sberlin","Fix a few common.collect-related deprecation warnings... because it's easy!"
"./core/src/com/google/inject/internal/InjectorImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InjectorImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InjectorImpl.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/InjectorImpl.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/InjectorImpl.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/src/com/google/inject/internal/InjectorImpl.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/src/com/google/inject/internal/InjectorImpl.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/src/com/google/inject/internal/InjectorImpl.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/InjectorImpl.java","9cdfe3a047011b6f78d84b189602d238bac2945a","Wed, 2 Mar 2011 13:53:17 +0000","sberlin","issue 610 - let requireExplicitBindings still allow TypeConverters to create ConvertedConstantBindings."
"./core/src/com/google/inject/internal/InjectorImpl.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/src/com/google/inject/internal/InjectorImpl.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/InjectorImpl.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/InjectorImpl.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/InjectorImpl.java","f712ffddfa3237a84bd457ebb999bfa0951cd422","Fri, 29 Oct 2010 12:00:27 +0000","sberlin","make sure MembersInjector dependencies don't blow up on requireExplicitBindings."
"./core/src/com/google/inject/internal/InjectorImpl.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./core/src/com/google/inject/internal/InjectorImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProviderToInternalFactoryAdapter.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProxyFactory.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/src/com/google/inject/internal/ProxyFactory.java","2823a381af4bde3c616c6542a6e2933d931ba76e","Sun, 26 Feb 2012 21:24:52 -0500","Sam Berlin","Fix issue 643 using a slightly modified version of the patch provided by Stuart."
"./core/src/com/google/inject/internal/ProxyFactory.java","88ee52dec9920c95e2f0ed3c43e625872c5d1fd4","Sun, 26 Feb 2012 21:22:30 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./core/src/com/google/inject/internal/ProxyFactory.java","1c9b92a5d8699e93df11c222566f797919db3f97","Sat, 21 Jan 2012 12:55:00 -0500","Sam Berlin","Fix issue 643 using a slightly modified version of the patch provided by Stuart."
"./core/src/com/google/inject/internal/ProxyFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProxyFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProxyFactory.java","336d222c7840090ecb36652af93d29f424c11921","Sun, 20 Feb 2011 21:39:07 +0000","sberlin","add some logging for interceptors that may trigger issue 252."
"./core/src/com/google/inject/internal/ProxyFactory.java","82d0fdbec0cb93ff770dab55931029f4140db54e","Tue, 18 Jan 2011 19:41:12 +0000","sberlin","rework method interception so that methods that aren't intercepted don't go through cglib, reducing the number of stack frames in most method calls.  this has a slight side effect that additional proxy classes are generated for a single class if (and only if) the intercepted methods change.  if the intercepted methods remain the same, then the proxy classes will continue to be shared (so things like assistedinject will not blow up the heap)."
"./core/src/com/google/inject/internal/ProxyFactory.java","fc46e1a98e70d22e5674a4aa42ede2fdede6a25a","Wed, 15 Dec 2010 05:38:37 +0000","limpbizkit@gmail.com","Fix warnings in core."
"./core/src/com/google/inject/internal/ProxyFactory.java","b02627d4f5706bf29788387e8d96a7a1bcc38f1f","Mon, 25 Oct 2010 04:56:00 +0000","sberlin","issue 407 -- better error messaging for failed interception.  previously exploded with a ComputationException, now uses a ConfigurationException with a good msg."
"./core/src/com/google/inject/internal/ProxyFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalContext.java","cadabc1aa1cbe30c48a7b730c2907c82abff6336","Wed, 26 Jun 2013 14:34:36 -0700","Christian Edward Gruber","Switch InternalContext to store dependency/source pairs more compactly."
"./core/src/com/google/inject/internal/InternalContext.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InternalContext.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InternalContext.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/InternalContext.java","1d0f8167ad78315676dc641db4d5367a68676cda","Fri, 22 Oct 2010 04:13:25 +0000","sberlin","issue 446 -- InternalContext.setDependency was returning the current, not previous, dependency."
"./core/src/com/google/inject/internal/InternalContext.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","fc46e1a98e70d22e5674a4aa42ede2fdede6a25a","Wed, 15 Dec 2010 05:38:37 +0000","limpbizkit@gmail.com","Fix warnings in core."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/ConstructorBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/DeferredLookups.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/DeferredLookups.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/DeferredLookups.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/DelayedInitialize.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","e91540ea9c03104069b90d40d5d1080dc84ba9d6","Wed, 11 Dec 2013 18:41:21 -0500","Sam Berlin","Fixes issue 652.  Allow method interceptors to capture the method & call it later from a different context.  Patch by Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=58040591"
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","6e4e4973a87dfbfbba0b3c03b299eacb9b8696bd","Mon, 28 Feb 2011 15:08:01 +0000","sberlin","update stack trace pruning (for AOP-internal methods & generated methods) to include causes."
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","e0f541287d1dcbdd5c52c471b357b6ac7d72d152","Sat, 15 Jan 2011 07:06:25 +0000","limpbizkit@gmail.com","Remove AOP boilerplate from user visible stack traces."
"./core/src/com/google/inject/internal/InterceptorStackCallback.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","338213332308fc9932603b2f4c853a4a7d19cc13","Tue, 12 Nov 2013 23:07:22 -0800","Christian Edward Gruber","Make guice build with javac 8."
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ProvidedByInternalFactory.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/src/com/google/inject/internal/SingleMemberInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InjectionRequestProcessor.java","ee443bce9731bb8da1eb60202f68de4c4c298698","Fri, 9 Sep 2011 21:19:11 +0000","guice.mirrorbot@gmail.com","Fix issue 644.  Print a better error message when requestStaticInjection is called on an interface, fix it so that static injection errors show the source of the static injection."
"./core/src/com/google/inject/internal/InjectionRequestProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InjectionRequestProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InjectionRequestProcessor.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/InjectionRequestProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InterceptorBindingProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/LinkedProviderBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/LinkedProviderBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/LinkedProviderBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/LinkedProviderBindingImpl.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/src/com/google/inject/internal/LinkedProviderBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProvisionListenerCallbackStore.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/Exceptions.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/Exceptions.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/Exceptions.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Lookups.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","6f8b39589d3f2193994cd470f83b343416260bf5","Tue, 2 Nov 2010 21:23:30 +0000","sberlin@gmail.com","(and remove unused import)"
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","22b3c09d5a4d573cd83b21cd5cab63485e211b26","Tue, 2 Nov 2010 21:22:49 +0000","sberlin@gmail.com","build a list, not a set -- so that we don't call hashCode or equals on any bindings."
"./core/src/com/google/inject/internal/InternalInjectorCreator.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/LinkedBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/LinkedBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/LinkedBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/LinkedBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/SingleMethodInjector.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/SingleMethodInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Errors.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/internal/Errors.java","c5848c0b57ad0f3f09acadff4be80c19d0c7d95f","Fri, 6 Dec 2013 17:05:44 -0500","Sam Berlin","Optimize RecordingBinder.withSource so it doesn't always create a new binder. Fixes issue 776, patch thanks to Stuart McCulloch! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57757534"
"./core/src/com/google/inject/internal/Errors.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/internal/Errors.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/internal/Errors.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/internal/Errors.java","ee443bce9731bb8da1eb60202f68de4c4c298698","Fri, 9 Sep 2011 21:19:11 +0000","guice.mirrorbot@gmail.com","Fix issue 644.  Print a better error message when requestStaticInjection is called on an interface, fix it so that static injection errors show the source of the static injection."
"./core/src/com/google/inject/internal/Errors.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/Errors.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/src/com/google/inject/internal/Errors.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/Errors.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/src/com/google/inject/internal/Errors.java","0d8b52f2099648805ec1e8aff9399b76856ad1d4","Mon, 21 Feb 2011 21:06:40 +0000","sberlin","issue 608 - child can rebind a parent binding if it was just-in-time."
"./core/src/com/google/inject/internal/Errors.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/Errors.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/Errors.java","dfee9fd5f78c5f1f769713b603e4e92a0b7b01e3","Sat, 30 Oct 2010 14:15:06 +0000","sberlin","issue 531 -- don't let c.g.i.internal.util reference outside its package."
"./core/src/com/google/inject/internal/Errors.java","b02627d4f5706bf29788387e8d96a7a1bcc38f1f","Mon, 25 Oct 2010 04:56:00 +0000","sberlin","issue 407 -- better error messaging for failed interception.  previously exploded with a ComputationException, now uses a ConfigurationException with a good msg."
"./core/src/com/google/inject/internal/Errors.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/AbstractBindingBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/AbstractBindingBuilder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/AbstractBindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/CreationListener.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/CreationListener.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/AbstractBindingProcessor.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/SingleParameterInjector.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/SingleParameterInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/ProvisionListenerStackCallback.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ConstructionProxyFactory.java","b02627d4f5706bf29788387e8d96a7a1bcc38f1f","Mon, 25 Oct 2010 04:56:00 +0000","sberlin","issue 407 -- better error messaging for failed interception.  previously exploded with a ComputationException, now uses a ConfigurationException with a good msg."
"./core/src/com/google/inject/internal/ConstructionProxyFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/DelegatingInvocationHandler.java","c18cbce112ed92edd7f94bc5094d49f11ffa259a","Tue, 3 May 2011 02:53:09 +0000","sberlin","remove "involving constructors" since we support proxies for circular dependencies involving providers too now."
"./core/src/com/google/inject/internal/DelegatingInvocationHandler.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/DelegatingInvocationHandler.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/SingleFieldInjector.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/SingleFieldInjector.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/SingleFieldInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ErrorsException.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/LookupProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ConstructorInjector.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/src/com/google/inject/internal/ConstructorInjector.java","2cc8ce904aff3d46a55cb6b886e975516a923524","Thu, 16 May 2013 10:53:11 -0700","Christian Edward Gruber","Clear context during provision.  Fixes http://code.google.com/p/google-guice/issues/detail?id=743"
"./core/src/com/google/inject/internal/ConstructorInjector.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/ConstructorInjector.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ConstructorInjector.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstructorInjector.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/ConstructorInjector.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ConstructorInjector.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/AbstractProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/AbstractProcessor.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/AbstractProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/MembersInjectorStore.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/src/com/google/inject/internal/MembersInjectorStore.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/MembersInjectorStore.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/MembersInjectorStore.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ExposedKeyFactory.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/ExposedKeyFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/PrivateElementProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/PrivateElementProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/PrivateElementProcessor.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/src/com/google/inject/internal/PrivateElementProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProviderMethod.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/src/com/google/inject/internal/ProviderMethod.java","409e0f578b620c38f6c8626dee78783219d2956e","Sat, 10 May 2014 10:34:16 -0400","Sam Berlin","Try to use cglibs FastClass to invoke @Provides methods, it's faster!"
"./core/src/com/google/inject/internal/ProviderMethod.java","29ce12be89584ca1ad671408ecbe0f6c343f9382","Mon, 10 Mar 2014 12:52:01 -0400","Sam Berlin","Add an SPI for @Provides methods (using the extensions SPI) so that users can do more analysis (with the enclosing instance, method, etc..)."
"./core/src/com/google/inject/internal/ProviderMethod.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProviderMethod.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProviderMethod.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/ProviderMethod.java","672d074534943987bab5629cac5662a8e07f8bcb","Thu, 16 Dec 2010 14:46:42 +0000","sberlin","implement hashcode when implementing equals."
"./core/src/com/google/inject/internal/ProviderMethod.java","7691f9ebdc39ea951f497b3950f87a4c18a3fd38","Thu, 16 Dec 2010 02:34:54 +0000","sberlin","require ProviderMethod instance to be equal also, per jessewilson review."
"./core/src/com/google/inject/internal/ProviderMethod.java","1068a4a4187309f05a54c3900251ccd897625feb","Thu, 16 Dec 2010 01:38:08 +0000","sberlin","allow duplicate @Provides methods to be deduplicated also."
"./core/src/com/google/inject/internal/ProviderMethod.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","76be88e8140f77a25824f5deb67bb13b8e5dabc6","Tue, 1 Jul 2014 16:56:13 -0400","Sam Berlin","Detect overrides of @Provides method and add an error for each one."
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","53a5936f55056dc695c35e6e16233c5b49780ded","Fri, 23 May 2014 18:19:12 -0400","Sam Berlin","Ignore synthetic bridge methods during provider method lookup. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=67854418"
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","409e0f578b620c38f6c8626dee78783219d2956e","Sat, 10 May 2014 10:34:16 -0400","Sam Berlin","Try to use cglibs FastClass to invoke @Provides methods, it's faster!"
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProviderMethodsModule.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/BoundProviderFactory.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/BoundProviderFactory.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/BoundProviderFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ListenerBindingProcessor.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/BindingProcessor.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/internal/BindingProcessor.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/src/com/google/inject/internal/BindingProcessor.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/src/com/google/inject/internal/BindingProcessor.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/BindingProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/BindingProcessor.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/BindingProcessor.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/BindingProcessor.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/src/com/google/inject/internal/BindingProcessor.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/src/com/google/inject/internal/BindingProcessor.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/BindingProcessor.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/BindingProcessor.java","920731718b6f3505cdfeefeabd789539603de18a","Fri, 11 Mar 2011 00:03:01 +0000","sberlin","fix issue 614 -- admittedly not the prettiest solution, but it works."
"./core/src/com/google/inject/internal/BindingProcessor.java","0d8b52f2099648805ec1e8aff9399b76856ad1d4","Mon, 21 Feb 2011 21:06:40 +0000","sberlin","issue 608 - child can rebind a parent binding if it was just-in-time."
"./core/src/com/google/inject/internal/BindingProcessor.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/BindingProcessor.java","fc46e1a98e70d22e5674a4aa42ede2fdede6a25a","Wed, 15 Dec 2010 05:38:37 +0000","limpbizkit@gmail.com","Fix warnings in core."
"./core/src/com/google/inject/internal/BindingProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InheritingState.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/src/com/google/inject/internal/InheritingState.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/src/com/google/inject/internal/InheritingState.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/src/com/google/inject/internal/InheritingState.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/internal/InheritingState.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InheritingState.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InheritingState.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/InheritingState.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/src/com/google/inject/internal/InheritingState.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/InheritingState.java","9c28d5b5242600f2d64be3bca5fee79fbc084753","Fri, 19 Nov 2010 02:39:46 +0000","sberlin","revert State & InheritingState back to using Iterable & Set."
"./core/src/com/google/inject/internal/InheritingState.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/InheritingState.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ConstructionProxy.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ConstructionProxy.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstructionProxy.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/src/com/google/inject/internal/ConstructionProxy.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/Initializables.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/TypeConverterBindingProcessor.java","31d8fbf9934778160de52837ef311f0d26efbbf8","Mon, 9 Dec 2013 14:26:19 -0500","Sam Berlin","Fix issue 723 -- minor optimizations to TypeConverterBindingProcessor. Description in the bug describes this best: TypeConverterBindingProcessor has two responsibilities: 1) prepare built-in type converters for primitives, enums, classes, etc. and 2) process TypeConverter bindings and register them with the containing injector."
"./core/src/com/google/inject/internal/TypeConverterBindingProcessor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/TypeConverterBindingProcessor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/TypeConverterBindingProcessor.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/TypeConverterBindingProcessor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/FactoryProxy.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/FactoryProxy.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/src/com/google/inject/internal/FactoryProxy.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/FactoryProxy.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/PrivateElementsImpl.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/src/com/google/inject/internal/PrivateElementsImpl.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/src/com/google/inject/internal/PrivateElementsImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/PrivateElementsImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/PrivateElementsImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/UniqueAnnotations.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/UniqueAnnotations.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ExposedBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ExposedBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ExposedBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","fc46e1a98e70d22e5674a4aa42ede2fdede6a25a","Wed, 15 Dec 2010 05:38:37 +0000","limpbizkit@gmail.com","Fix warnings in core."
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","6d8ab0b649afffc5ae35eb832bfbaa3d95cc6c87","Wed, 3 Nov 2010 02:23:23 +0000","sberlin","never call hashcode on the underlying binding instances.  continue to call equals as lazily as possible."
"./core/src/com/google/inject/internal/ProviderInstanceBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/ExposureBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/ExposureBuilder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ExposureBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/WeakKeySet.java","628ec00157c3ebcee8eb01537fed11663a45129b","Sat, 3 May 2014 00:40:36 -0400","Sam Berlin","Make WeakKeySet less susceptible to programming errors by making the backingMap key a concrete type. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65307015"
"./core/src/com/google/inject/internal/WeakKeySet.java","f5349cd25c1338473c3cc11f18f389fef3882753","Sat, 3 May 2014 00:38:26 -0400","Sam Berlin","Use the correct key to check for blacklisting of multibound elements. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64831090"
"./core/src/com/google/inject/internal/WeakKeySet.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/src/com/google/inject/internal/WeakKeySet.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/src/com/google/inject/internal/WeakKeySet.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/src/com/google/inject/internal/WeakKeySet.java","4ab2a909972c14715e3adcbe9e9acd2c1c403935","Tue, 1 Apr 2014 15:04:07 -0700","Christian Edward Gruber","Memoize Key#toString() to reduce allocations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63557612"
"./core/src/com/google/inject/internal/WeakKeySet.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/WeakKeySet.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/WeakKeySet.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/src/com/google/inject/internal/WeakKeySet.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/WeakKeySet.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/State.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/src/com/google/inject/internal/State.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/src/com/google/inject/internal/State.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/src/com/google/inject/internal/State.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/src/com/google/inject/internal/State.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/State.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/State.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/State.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/src/com/google/inject/internal/State.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/src/com/google/inject/internal/State.java","9c28d5b5242600f2d64be3bca5fee79fbc084753","Fri, 19 Nov 2010 02:39:46 +0000","sberlin","revert State & InheritingState back to using Iterable & Set."
"./core/src/com/google/inject/internal/State.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/src/com/google/inject/internal/State.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InstanceBindingImpl.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/InstanceBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InstanceBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InstanceBindingImpl.java","6d8ab0b649afffc5ae35eb832bfbaa3d95cc6c87","Wed, 3 Nov 2010 02:23:23 +0000","sberlin","never call hashcode on the underlying binding instances.  continue to call equals as lazily as possible."
"./core/src/com/google/inject/internal/InstanceBindingImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/UntargettedBindingProcessor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/src/com/google/inject/internal/UntargettedBindingProcessor.java","07170cc3f59f08954c97e19f2d3cf165d3a8601a","Fri, 11 Mar 2011 03:02:39 +0000","sberlin","remove phases from BindingProcessor, refactor so that two different classes do the two different bits, with an abstract superclass managing the shared pieces."
"./core/src/com/google/inject/internal/ContextualCallable.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/RehashableKeys.java","4ab2a909972c14715e3adcbe9e9acd2c1c403935","Tue, 1 Apr 2014 15:04:07 -0700","Christian Edward Gruber","Memoize Key#toString() to reduce allocations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63557612"
"./core/src/com/google/inject/internal/RehashableKeys.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/ErrorHandler.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/src/com/google/inject/internal/InternalFactoryToInitializableAdapter.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/src/com/google/inject/internal/ConstantFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/ConstantFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/InternalFactory.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/internal/BindingBuilder.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/src/com/google/inject/internal/BindingBuilder.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/src/com/google/inject/internal/BindingBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/internal/BindingBuilder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/internal/BindingBuilder.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/Singleton.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/Singleton.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/PrivateModule.java","be1bbda4ec75f1dd0da42698722386540d36f453","Fri, 6 Dec 2013 17:06:12 -0500","Sam Berlin","Fix issue 748 -- add a protected method in PrivateModule for binding provision listeners.  Patch provided by Stuart McCulloch, thanks! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57764090"
"./core/src/com/google/inject/PrivateModule.java","f74ee672186bffc687b2accb911344a7021e7ecf","Tue, 18 Oct 2011 16:43:18 -0400","Sam Berlin","Better errors when using binder(), etc. outside of configure()."
"./core/src/com/google/inject/PrivateModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/PrivateModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/PrivateModule.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/name/Names.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/name/Names.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/name/package-info.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/name/NamedImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/name/NamedImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/src/com/google/inject/name/NamedImpl.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/src/com/google/inject/name/Named.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/src/com/google/inject/name/Named.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/BytecodeGenTest.java","8743a0bb0fb49f30117c846880a7df2e7b36657e","Fri, 20 Sep 2013 17:30:27 -0700","Christian Edward Gruber","Convert from MapMaker to CacheBuilder.  Change mostly from Stewart McCulloch mcculls@gmail.com modulo internal build issues, a few tweaks and dealing with some test flakage in a functional test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52590552"
"./core/test/com/googlecode/guice/BytecodeGenTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/googlecode/guice/BytecodeGenTest.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./core/test/com/googlecode/guice/BytecodeGenTest.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/test/com/googlecode/guice/BytecodeGenTest.java","1c6ff880b9a83a833c6fc5fb4fc0e3a15bfb1f80","Thu, 18 Nov 2010 03:59:56 +0000","sberlin","fix issue 508 -- consider method return type when deciding whether to bridge.  patch contributed by stuart."
"./core/test/com/googlecode/guice/BytecodeGenTest.java","a102c17638ec586de3d6930c8ef794c751d157d6","Tue, 9 Nov 2010 05:35:13 +0000","sberlin","make sure $$EnhancerByGuice$$ & $$FastClassByGuice$$ stay named that way and don't become $$$EnhancerByGuice$$ & $$$FastClassByGuice$$ after jarjar renames the cglib classes."
"./core/test/com/googlecode/guice/BytecodeGenTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/OSGiContainerTest.java","3236b100a95b739577dfcd117c24615370a1d0af","Thu, 13 Feb 2014 10:37:24 -0800","Christian Edward Gruber","Replace guava 11 with 16 and extract Guava as a separate dependency."
"./core/test/com/googlecode/guice/OSGiContainerTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/googlecode/guice/OSGiContainerTest.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/googlecode/guice/OSGiContainerTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/Jsr330Test.java","013039198244a5cd106de0a6e20e66839117ef49","Fri, 9 Aug 2013 11:10:15 -0700","Christian Edward Gruber","Doing a cleanup before we can make having @javax.inject.Inject on an abstract method a compile error. I am suppressing the error for the test case that intentionally tests this error. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50571932"
"./core/test/com/googlecode/guice/Jsr330Test.java","4352fa034ab6dd0c7ce117a07620426ddb00a50d","Fri, 9 Aug 2013 11:09:53 -0700","Christian Edward Gruber","Added suppression to @javax.inject.Inject on a final field test case so we can make it a compiler error ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50571127"
"./core/test/com/googlecode/guice/Jsr330Test.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/googlecode/guice/Jsr330Test.java","16f8b0fdf6f1993f6d5d714d86fd455065301474","Thu, 9 Dec 2010 14:18:42 +0000","sberlin","fix issue 578, Providers.guicify loses injection points from the delegate."
"./core/test/com/googlecode/guice/Jsr330Test.java","a523ea5e25e18b348097f587a7f150b987f440b3","Thu, 9 Dec 2010 03:00:02 +0000","sberlin","rm jsr330, move the one method into Providers."
"./core/test/com/googlecode/guice/Jsr330Test.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/bundle/OSGiTestActivator.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/googlecode/guice/bundle/OSGiTestActivator.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/googlecode/guice/bundle/OSGiTestActivator.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/GuiceTck.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/googlecode/guice/GuiceTck.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/googlecode/guice/PackageVisibilityTestModule.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/util/TypesTest.java","ee9a8f34f061cd15c091943903fdf8c6e173523a","Wed, 9 Nov 2011 18:44:24 -0500","Sam Berlin","Fix TypesTest to use an actual parameterized array.  Necessary because JDK7 got a little smarter in its getActualTypeArguments method where it returns a Class if the array type isn't generic, and GenericArrayType only if it was actually generic."
"./core/test/com/google/inject/util/TypesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/util/TypesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/util/NoopOverrideTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/util/ProvidersTest.java","4754a22f265ad638d5484d12219515bd663272d0","Sat, 3 May 2014 00:40:05 -0400","Sam Berlin","Add equals/hashCode to Providers.guicify(...) results. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65072672"
"./core/test/com/google/inject/util/ProvidersTest.java","14e2703cd15b0ac745a0df80d25800692d8c727e","Sat, 3 May 2014 00:39:35 -0400","Sam Berlin","Implement hashCode and equals on type returned by Providers.of(...). There doesn't seem to be any reason *not* to provide these methods, and it means downstream code that does"
"./core/test/com/google/inject/util/ProvidersTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/util/ProvidersTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/util/OverrideModuleTest.java","ebe9f053ab2431f8f22f6d892cffadef4b10479c","Fri, 6 Dec 2013 17:08:25 -0500","Sam Berlin","Re-committed the rolled back CL, after fixing internal projects."
"./core/test/com/google/inject/util/OverrideModuleTest.java","a4c16e8b45261e23e1c35d5fdce9b57357b16d1f","Fri, 6 Dec 2013 17:06:40 -0500","Sam Berlin","Rolled back commit -- broke some internal projects."
"./core/test/com/google/inject/util/OverrideModuleTest.java","9b268e4467753f31eb6dfeb4001e76e32b01f5a3","Fri, 6 Dec 2013 17:04:48 -0500","Sam Berlin","Pass the correct stage to Modules.override, so currentStage() works. Fixes issue 784 -- patch thanks to Tavian Barnes. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57755697"
"./core/test/com/google/inject/util/OverrideModuleTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/GenericInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/GenericInjectionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/GenericInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ModuleTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/MembersInjectorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/MembersInjectorTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/TypeConversionTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/TypeConversionTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/TypeConversionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/TypeConversionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/TypeConversionTest.java","9cdfe3a047011b6f78d84b189602d238bac2945a","Wed, 2 Mar 2011 13:53:17 +0000","sberlin","issue 610 - let requireExplicitBindings still allow TypeConverters to create ConvertedConstantBindings."
"./core/test/com/google/inject/TypeConversionTest.java","b2f1760648f0231cec447d837ba4651d75bbf315","Fri, 19 Nov 2010 02:33:32 +0000","sberlin","issue 436 -- add Injector.getTypeConverters, and expand ConvertedConstantBinding to expose the TypeConverter for it.  patch graciously provided by Stuart, thanks!"
"./core/test/com/google/inject/TypeConversionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ParentInjectorTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/ParentInjectorTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/ParentInjectorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ParentInjectorTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/ParentInjectorTest.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/test/com/google/inject/ParentInjectorTest.java","b281953cbb22a77f858ca44d057c9448e3d49a28","Mon, 21 Feb 2011 21:09:26 +0000","sberlin","test for issue 608."
"./core/test/com/google/inject/ParentInjectorTest.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/test/com/google/inject/ParentInjectorTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ScopesTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/ScopesTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/ScopesTest.java","33736ecd7a00d7fa3292bee6c1329b8edee670cc","Wed, 18 Sep 2013 10:59:00 -0700","Christian Edward Gruber","Because error-prone treats more than one scope annotation on a class as a compile-time error, existing builds that upgrade to error prone will fail.  To support that, given that these are tests of the run-time version of the failure, add a supporession to the usages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51282197 MOE_MIGRATED_REVID=51282207"
"./core/test/com/google/inject/ScopesTest.java","66094fb9923bb4d1cf109be8915bac4679083169","Fri, 13 Jan 2012 18:21:27 -0500","Sam Berlin","Add isEagerSingleton."
"./core/test/com/google/inject/ScopesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ScopesTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/ScopesTest.java","09ab5f9e6a1d81bb6d4d196b009492f959ca5ceb","Mon, 25 Oct 2010 00:41:10 +0000","sberlin","issue 477 - fix Scopes.isSingleton to navigate through exposed private elements."
"./core/test/com/google/inject/ScopesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/CircularDependencyTest.java","05bf8e59221197d8e1b8b04bace4ff5cc34e7336","Tue, 27 Sep 2011 15:37:30 +0000","guice.mirrorbot@gmail.com","Add Scopes.isCircularProxy, for use by Scope implementations.  The basic problem is that somewhere along the line, Guice is breaking the type-safety of <T> in the scope(Key<T>, Provider<T>) method.  This happens when <T> is involved in a circular dependency, and the ConstructionContext creates a circular proxy for a given 'expectedType' of <T> (the type in the parameter where it's being injected).  Expected type is a superclass or superinterface of <T>, not a subclass or subinterface, so if a Scope caches the result of Key<T> -> Provider<T>.get(), and then tries to reuse it, it's possible that we return something that isn't compatible with <T>.  This results in either a ClassCastException (if cglib is involved) or IllegalArgumentException (java reflection) when trying to construct the object, because the parameters don't match the arguments."
"./core/test/com/google/inject/CircularDependencyTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/CircularDependencyTest.java","d5737a60194ed44bfd8ae7948f9ca7806785d2dd","Mon, 2 May 2011 18:03:35 +0000","sberlin","fix @ProvidedBy circular dependencies."
"./core/test/com/google/inject/CircularDependencyTest.java","c94f4506c70ea41068ed9c5a00ddf6711eb7357f","Mon, 2 May 2011 13:30:37 +0000","sberlin","assert that ProviderInternalFactory doesn't think circular dependencies exist when the providers are in different PrivateModules, temporarily remove check for @ProvidedBy due to other things that need fixing first."
"./core/test/com/google/inject/CircularDependencyTest.java","425d099754a30565152d166d13ec1e951ff19410","Mon, 2 May 2011 00:28:59 +0000","sberlin","fix provider circular dependency detection to use the Key it is creating, not the Key it is fulfulling, to catch errors sooner."
"./core/test/com/google/inject/CircularDependencyTest.java","e6ce1886f5f8f700cea00bafefd093ccbbe8addf","Sat, 30 Apr 2011 15:38:05 +0000","sberlin","fix issue 626 -- properly handle circular proxies between providers (either failing or proxying), prevents StackOverflowErrors."
"./core/test/com/google/inject/CircularDependencyTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/test/com/google/inject/CircularDependencyTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ProvisionExceptionsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ProvisionExceptionsTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/ProvisionExceptionsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ModuleSourceTest.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/test/com/google/inject/spi/ElementsTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/spi/ElementsTest.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/test/com/google/inject/spi/ElementsTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/spi/ElementsTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/spi/ElementsTest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/test/com/google/inject/spi/ElementsTest.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/test/com/google/inject/spi/ElementsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/ElementsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/ElementsTest.java","ede7731ed9764c081460c19c9fec3b1159d43264","Mon, 25 Oct 2010 02:52:08 +0000","sberlin","issue 496 -- ConstantBindingBuilder was missing to(byte), forgot to commit test."
"./core/test/com/google/inject/spi/ElementsTest.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/google/inject/spi/ElementsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/FailingBindingScopingVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/FailingBindingScopingVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/FailingElementVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","76be88e8140f77a25824f5deb67bb13b8e5dabc6","Tue, 1 Jul 2014 16:56:13 -0400","Sam Berlin","Detect overrides of @Provides method and add an error for each one."
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","53a5936f55056dc695c35e6e16233c5b49780ded","Fri, 23 May 2014 18:19:12 -0400","Sam Berlin","Ignore synthetic bridge methods during provider method lookup. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=67854418"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","409e0f578b620c38f6c8626dee78783219d2956e","Sat, 10 May 2014 10:34:16 -0400","Sam Berlin","Try to use cglibs FastClass to invoke @Provides methods, it's faster!"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","29ce12be89584ca1ad671408ecbe0f6c343f9382","Mon, 10 Mar 2014 12:52:01 -0400","Sam Berlin","Add an SPI for @Provides methods (using the extensions SPI) so that users can do more analysis (with the enclosing instance, method, etc..)."
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/ProviderMethodsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ElementApplyToTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/spi/ElementApplyToTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/BindingTargetVisitorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/BindingTargetVisitorTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ToolStageInjectorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/ToolStageInjectorTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/spi/ToolStageInjectorTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/InjectionPointTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/spi/InjectionPointTest.java","4daa205dc4fe1d339f91155dde65f3941cbd144c","Sat, 3 May 2014 00:44:06 -0400","Sam Berlin","Ignore synthetic/bridge methods when determining if a method should be injected.  This broke injections for different reasons before & after java8, but the fix is the same for both."
"./core/test/com/google/inject/spi/InjectionPointTest.java","404ffc3f56b224236653a4491efe1dcde1064bb7","Fri, 9 Sep 2011 21:21:12 +0000","guice.mirrorbot@gmail.com","Changing callers of deprecated methods ImmutableSet.of(E[]) and ImmutableSortedSet.of(E[]) to use .copyOf() (inlining the deprecated methods)."
"./core/test/com/google/inject/spi/InjectionPointTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/InjectionPointTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/InjectionPointTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/HasDependenciesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/HasDependenciesTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/HasDependenciesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/FailingTargetVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/FailingTargetVisitor.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ModuleRewriterTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/ModuleRewriterTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/ModuleRewriterTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/SpiBindingsTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/spi/SpiBindingsTest.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./core/test/com/google/inject/spi/SpiBindingsTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/spi/SpiBindingsTest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/test/com/google/inject/spi/SpiBindingsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/SpiBindingsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/spi/SpiBindingsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/InjectorSpiTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/spi/InjectorSpiTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/spi/InjectorSpiTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/spi/ElementSourceTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/spi/ElementSourceTest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/test/com/google/inject/spi/ElementSourceTest.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/test/com/google/inject/AllTests.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/test/com/google/inject/AllTests.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/test/com/google/inject/AllTests.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/test/com/google/inject/AllTests.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/AllTests.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/test/com/google/inject/AllTests.java","605bd086d3ecc4290ddfa4cf89fd840d22d1894c","Fri, 9 Aug 2013 11:04:00 -0700","Christian Edward Gruber","Updates the internals of an Element's source to keep track of the Modules that installed it, as well as the complete stack trace leading to the binding. The data is not yet exposed in Element.getSource(), but will be exposed in a future CL."
"./core/test/com/google/inject/AllTests.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/test/com/google/inject/AllTests.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/AllTests.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/AllTests.java","86142556d360048671dc129f7b0c316f542473af","Sat, 25 Jun 2011 05:05:23 +0000","sberlin","refactor removeSuppressedTests out of AllTests, to remove the circular dependency between it & StrictContainerTestSuite."
"./core/test/com/google/inject/AllTests.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/test/com/google/inject/AllTests.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/google/inject/AllTests.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/DuplicateBindingsTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/DuplicateBindingsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/DuplicateBindingsTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/DuplicateBindingsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/DuplicateBindingsTest.java","7691f9ebdc39ea951f497b3950f87a4c18a3fd38","Thu, 16 Dec 2010 02:34:54 +0000","sberlin","require ProviderMethod instance to be equal also, per jessewilson review."
"./core/test/com/google/inject/DuplicateBindingsTest.java","1068a4a4187309f05a54c3900251ccd897625feb","Thu, 16 Dec 2010 01:38:08 +0000","sberlin","allow duplicate @Provides methods to be deduplicated also."
"./core/test/com/google/inject/DuplicateBindingsTest.java","6d8ab0b649afffc5ae35eb832bfbaa3d95cc6c87","Wed, 3 Nov 2010 02:23:23 +0000","sberlin","never call hashcode on the underlying binding instances.  continue to call equals as lazily as possible."
"./core/test/com/google/inject/DuplicateBindingsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/PrivateModuleTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/PrivateModuleTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/PrivateModuleTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/PrivateModuleTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/PrivateModuleTest.java","cc17f1438ed7beb10c042ddbe60fb3d8a3265147","Sun, 27 Feb 2011 00:02:03 +0000","sberlin","significantly improve error reporting for binding a key already bound in a child injector or private module.  include all sources in the error msg (since it can be in many sibling private modules or child injectors), including whether or not it as a JIT binding."
"./core/test/com/google/inject/PrivateModuleTest.java","45ca7f66156b947c7b9c45a71ad48be9a0bcda08","Sun, 20 Feb 2011 00:05:28 +0000","sberlin","issue 345 - better error message for private modules.  show the source of a child binding instead of just saying its in a child injector.  also give a hint that you may have wanted to expose the binding."
"./core/test/com/google/inject/PrivateModuleTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/TypeLiteralTest.java","de4cc320c98b800f81703b8a186e08c478fab74c","Fri, 9 Sep 2011 21:20:09 +0000","guice.mirrorbot@gmail.com","Changing callers of deprecated method ImmutableList.of(E[]) to call ImmutableList.copyOf(E[]) instead (inlining the deprecated method."
"./core/test/com/google/inject/TypeLiteralTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/TypeLiteralTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/TypeLiteralTest.java","5d5941f9c5a882ac98a3312bd411bde00a1f425f","Thu, 25 Nov 2010 02:06:49 +0000","sberlin","rm documentation that a TypeLiteral with wildcard character (such as List<? extends CharSequence>) doesn't work, add a test that asserts it does work."
"./core/test/com/google/inject/TypeLiteralTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/TypeLiteralInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/TypeLiteralInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/RequestInjectionTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/RequestInjectionTest.java","6b7e7187bd074d3f2df9b04e17fa01e7592f295c","Sun, 16 Oct 2011 22:36:01 +0000","guice.mirrorbot@gmail.com","Fix a very obscure bug where more than one InitializableReference of the same identity could result in an NPE during injector creation if the one that got ejected from the Map was requested for injection from another InitializableReference."
"./core/test/com/google/inject/RequestInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/RequestInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/Asserts.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/Asserts.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/Asserts.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/Asserts.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/Asserts.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BinderTestSuite.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/BinderTestSuite.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BinderTestSuite.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/BinderTestSuite.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/matcher/MatcherTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/matcher/MatcherTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/SuperclassTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ModulesTest.java","a9228269b4d6e7b74a6354f179babe723c00f387","Tue, 12 Nov 2013 23:06:04 -0800","Christian Edward Gruber","Make named classes for anonymous Modules so they appear prettier (and useful) in error messages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54796862"
"./core/test/com/google/inject/ModulesTest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/test/com/google/inject/ModulesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ModulesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/EagerSingletonTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/OptionalBindingTest.java","a5b2b1fc374c9d5945fa3d9b101b591dc88710ab","Thu, 10 Apr 2014 19:17:11 -0400","Sam Berlin","Suppress compiler errors reported by an error-prone checker ([]) for tests."
"./core/test/com/google/inject/OptionalBindingTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/OptionalBindingTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/InjectorTest.java","ee443bce9731bb8da1eb60202f68de4c4c298698","Fri, 9 Sep 2011 21:19:11 +0000","guice.mirrorbot@gmail.com","Fix issue 644.  Print a better error message when requestStaticInjection is called on an interface, fix it so that static injection errors show the source of the static injection."
"./core/test/com/google/inject/InjectorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/InjectorTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BindingTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/BindingTest.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/test/com/google/inject/BindingTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BindingTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/BindingTest.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/google/inject/BindingTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/JitBindingsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/JitBindingsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/JitBindingsTest.java","9cdfe3a047011b6f78d84b189602d238bac2945a","Wed, 2 Mar 2011 13:53:17 +0000","sberlin","issue 610 - let requireExplicitBindings still allow TypeConverters to create ConvertedConstantBindings."
"./core/test/com/google/inject/JitBindingsTest.java","ea27c01951aec20a880d410c57d1e5e1204fcb84","Tue, 14 Dec 2010 14:08:21 +0000","sberlin","review comments from jesse."
"./core/test/com/google/inject/JitBindingsTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./core/test/com/google/inject/JitBindingsTest.java","f712ffddfa3237a84bd457ebb999bfa0951cd422","Fri, 29 Oct 2010 12:00:27 +0000","sberlin","make sure MembersInjector dependencies don't blow up on requireExplicitBindings."
"./core/test/com/google/inject/JitBindingsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BindingAnnotationTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/BindingAnnotationTest.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/test/com/google/inject/BindingAnnotationTest.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/test/com/google/inject/BindingAnnotationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BindingAnnotationTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/LoggerInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/LoggerInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ErrorHandlingTest.java","33736ecd7a00d7fa3292bee6c1329b8edee670cc","Wed, 18 Sep 2013 10:59:00 -0700","Christian Edward Gruber","Because error-prone treats more than one scope annotation on a class as a compile-time error, existing builds that upgrade to error prone will fail.  To support that, given that these are tests of the run-time version of the failure, add a supporession to the usages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51282197 MOE_MIGRATED_REVID=51282207"
"./core/test/com/google/inject/ErrorHandlingTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ErrorHandlingTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/TypeLiteralTypeResolutionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/TypeLiteralTypeResolutionTest.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./core/test/com/google/inject/TypeLiteralTypeResolutionTest.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./core/test/com/google/inject/TypeLiteralTypeResolutionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/TypeLiteralTypeResolutionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/MethodInterceptionTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/MethodInterceptionTest.java","e91540ea9c03104069b90d40d5d1080dc84ba9d6","Wed, 11 Dec 2013 18:41:21 -0500","Sam Berlin","Fixes issue 652.  Allow method interceptors to capture the method & call it later from a different context.  Patch by Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=58040591"
"./core/test/com/google/inject/MethodInterceptionTest.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/test/com/google/inject/MethodInterceptionTest.java","2823a381af4bde3c616c6542a6e2933d931ba76e","Sun, 26 Feb 2012 21:24:52 -0500","Sam Berlin","Fix issue 643 using a slightly modified version of the patch provided by Stuart."
"./core/test/com/google/inject/MethodInterceptionTest.java","88ee52dec9920c95e2f0ed3c43e625872c5d1fd4","Sun, 26 Feb 2012 21:22:30 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./core/test/com/google/inject/MethodInterceptionTest.java","1c9b92a5d8699e93df11c222566f797919db3f97","Sat, 21 Jan 2012 12:55:00 -0500","Sam Berlin","Fix issue 643 using a slightly modified version of the patch provided by Stuart."
"./core/test/com/google/inject/MethodInterceptionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/MethodInterceptionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/MethodInterceptionTest.java","be2505a424c177c372f7c8a38afbc0cba5cf4c24","Thu, 21 Apr 2011 18:17:15 +0000","sberlin","specify that interceptors are called in the order they are listed in bindInterceptor(Matcher, Matcher, Interceptor...).  add a test that guarantees it."
"./core/test/com/google/inject/MethodInterceptionTest.java","d4ec8b091b2210ec196922b8b103722a61157d46","Wed, 20 Apr 2011 16:57:24 +0000","sberlin","update to asm-3.3.1, update to new cglib that fixes a bug with bridge methods, add test that verifies the fix works.  (previously it worked within Eclipse but not javac because eclipse's compiler wrote out bridge methods differently.)"
"./core/test/com/google/inject/MethodInterceptionTest.java","1e5fc1daab8364f1d16614e9013135a115e66e2c","Mon, 28 Feb 2011 17:49:54 +0000","sberlin","fix typo, make test not loop forever."
"./core/test/com/google/inject/MethodInterceptionTest.java","6e4e4973a87dfbfbba0b3c03b299eacb9b8696bd","Mon, 28 Feb 2011 15:08:01 +0000","sberlin","update stack trace pruning (for AOP-internal methods & generated methods) to include causes."
"./core/test/com/google/inject/MethodInterceptionTest.java","82d0fdbec0cb93ff770dab55931029f4140db54e","Tue, 18 Jan 2011 19:41:12 +0000","sberlin","rework method interception so that methods that aren't intercepted don't go through cglib, reducing the number of stack frames in most method calls.  this has a slight side effect that additional proxy classes are generated for a single class if (and only if) the intercepted methods change.  if the intercepted methods remain the same, then the proxy classes will continue to be shared (so things like assistedinject will not blow up the heap)."
"./core/test/com/google/inject/MethodInterceptionTest.java","e0f541287d1dcbdd5c52c471b357b6ac7d72d152","Sat, 15 Jan 2011 07:06:25 +0000","limpbizkit@gmail.com","Remove AOP boilerplate from user visible stack traces."
"./core/test/com/google/inject/MethodInterceptionTest.java","b02627d4f5706bf29788387e8d96a7a1bcc38f1f","Mon, 25 Oct 2010 04:56:00 +0000","sberlin","issue 407 -- better error messaging for failed interception.  previously exploded with a ComputationException, now uses a ConfigurationException with a good msg."
"./core/test/com/google/inject/MethodInterceptionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ProviderInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ProviderInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/SuiteUtils.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/SuiteUtils.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/SuiteUtils.java","86142556d360048671dc129f7b0c316f542473af","Sat, 25 Jun 2011 05:05:23 +0000","sberlin","refactor removeSuppressedTests out of AllTests, to remove the circular dependency between it & StrictContainerTestSuite."
"./core/test/com/google/inject/NullableInjectionPointTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/NullableInjectionPointTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/NullableInjectionPointTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/NullableInjectionPointTest.java","7f6067d38877588c51473029fdef1994b61a9a1d","Fri, 29 Oct 2010 03:01:12 +0000","sberlin","Update test to make sure custom @Nullable annotations work, in addition to c.g.i.i.util.Nullable."
"./core/test/com/google/inject/NullableInjectionPointTest.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./core/test/com/google/inject/NullableInjectionPointTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BindingOrderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BindingOrderTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ProvisionExceptionTest.java","a5b2b1fc374c9d5945fa3d9b101b591dc88710ab","Thu, 10 Apr 2014 19:17:11 -0400","Sam Berlin","Suppress compiler errors reported by an error-prone checker ([]) for tests."
"./core/test/com/google/inject/ProvisionExceptionTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/ProvisionExceptionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ProvisionExceptionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ProvisionListenerTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/ProvisionListenerTest.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/test/com/google/inject/ProvisionListenerTest.java","be1bbda4ec75f1dd0da42698722386540d36f453","Fri, 6 Dec 2013 17:06:12 -0500","Sam Berlin","Fix issue 748 -- add a protected method in PrivateModule for binding provision listeners.  Patch provided by Stuart McCulloch, thanks! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57764090"
"./core/test/com/google/inject/ProvisionListenerTest.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./core/test/com/google/inject/ProvisionListenerTest.java","2cc8ce904aff3d46a55cb6b886e975516a923524","Thu, 16 May 2013 10:53:11 -0700","Christian Edward Gruber","Clear context during provision.  Fixes http://code.google.com/p/google-guice/issues/detail?id=743"
"./core/test/com/google/inject/ProvisionListenerTest.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/test/com/google/inject/ProvisionListenerTest.java","d51292d5a4a788b1275eb9ad55cf612e68640bbf","Sun, 26 Feb 2012 21:23:19 -0500","Sam Berlin","Change ProvisionListener to expose Binding instead of Key, and change bindListener to use a Matcher for Binding instead of Key.  This is a backwards incompatible change, but we haven't released yet, so it's worth doing."
"./core/test/com/google/inject/ProvisionListenerTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ProvisionListenerTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/ProvisionListenerTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/ProvisionListenerTest.java","ba75f3563a179ddd3de14cfed6ba663e9e298032","Sun, 12 Jun 2011 21:54:43 +0000","sberlin","issue 631 -- expose dependency hierarchy in ProvisionListener."
"./core/test/com/google/inject/ProvisionListenerTest.java","132a5db7c643b8f367eb5f09024cf13ea37c9831","Sun, 5 Jun 2011 18:32:05 +0000","sberlin","issue 78 - provision interception.  this only lets you listen to provisions (both before & after provisioning occurs), it does not let you change the return value of the provision."
"./core/test/com/google/inject/SerializationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/SerializationTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/KeyTest.java","b0aeeda0b5639a0553f0444e85926e4119cf16e0","Wed, 18 Sep 2013 10:58:05 -0700","Christian Edward Gruber","Remove loophole for making non-canonical Keys. This makes the behaviour of Key.get(new TypeLiteral<T>() {}) and new Key<T>() {} the same. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51109122"
"./core/test/com/google/inject/KeyTest.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./core/test/com/google/inject/KeyTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/KeyTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/PerformanceComparison.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/PerformanceComparison.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/TypeListenerTest.java","35023b810b1b769daa2ca191ddb4cfcea33f077f","Fri, 6 Dec 2013 17:08:01 -0500","Sam Berlin","Fix issue 779 -- deduplicate listeners & interceptors.  Using a slightly modified patch from Tavian Barnes, thanks Tavian! ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798796"
"./core/test/com/google/inject/TypeListenerTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/TypeListenerTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/TypeListenerTest.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/test/com/google/inject/TypeListenerTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/TypeListenerTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/TypeListenerTest.java","b7a4174d866abba845221aab958d97d4c18e77b3","Sun, 20 Feb 2011 00:51:27 +0000","sberlin","rm printStackTrace."
"./core/test/com/google/inject/TypeListenerTest.java","159cd8647b9b9d662aaf8c1a21a8fe40a70e99b5","Sun, 20 Feb 2011 00:50:36 +0000","sberlin","validate that issue 432 is not a problem anymore."
"./core/test/com/google/inject/TypeListenerTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","26d0006317e4056343cbb490adcc055addb0c002","Tue, 1 Jul 2014 16:55:03 -0400","Sam Berlin","Change the line number test to generate a class with javax.inject.Inject rather than c.g.inject.Inject. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=70023941"
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","bd7a14b0b5830a06f48337a3f02af308300abefd","Thu, 24 Feb 2011 14:49:01 +0000","sberlin","make sure tests can run in on dist code, and no_aop can still build."
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","c17c5a9b58d1d0ac0cf77dba0f5b5011a445c610","Mon, 14 Feb 2011 01:01:01 +0000","sberlin","issue 574 - don't freak out on generated classes when trying to get line numbers."
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","ac4cdbe137274fd83a7e8e7100653f261618eb94","Thu, 21 Oct 2010 22:05:58 +0000","mcculls","Issue 561: fix no_aop build by munging away all aop-related references"
"./core/test/com/google/inject/internal/util/LineNumbersTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/internal/UniqueAnnotationsTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/internal/RehashableKeysTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./core/test/com/google/inject/internal/RehashableKeysTest.java","4ab2a909972c14715e3adcbe9e9acd2c1c403935","Tue, 1 Apr 2014 15:04:07 -0700","Christian Edward Gruber","Memoize Key#toString() to reduce allocations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63557612"
"./core/test/com/google/inject/internal/RehashableKeysTest.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./core/test/com/google/inject/internal/WeakKeySetTest.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./core/test/com/google/inject/internal/WeakKeySetTest.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./core/test/com/google/inject/internal/WeakKeySetTest.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./core/test/com/google/inject/internal/ProxyFactoryTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/internal/ProxyFactoryTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/internal/ProxyFactoryTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/internal/MoreTypesTest.java","978ed86a76b3c47e8247f6691586b994bcf13dbc","Thu, 16 May 2013 07:49:41 -0700","Christian Edward Gruber","Fix a == vs .equals() bug in MoreTypes."
"./core/test/com/google/inject/internal/MoreTypesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/internal/MoreTypesTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./core/test/com/google/inject/internal/MoreTypesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/ClientServiceWithFactories.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/ClientServiceWithDependencyInjection.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/JndiProvider.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/example/JndiProvider.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/ClientServiceWithGuice.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/example/ClientServiceWithGuice.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/ClientServiceWithGuiceDefaults.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/example/ClientServiceWithGuiceDefaults.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/example/JndiProviderClient.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/example/JndiProviderClient.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BinderTest.java","0e896db46024dc7596302f8622276d1c7df02c6b","Wed, 11 Dec 2013 18:40:58 -0500","Sam Berlin","A Message should have only one source but as it is used in Errors, currently it can have multiple sources. The Message objects is returned from two public methods(Elements#getElements() and Errors#getMessages()) that make any changes in its method declarations difficult. As the first step, I am going to remove all calls to the Message constructor that receives multiple sources from []. So, the only calls will be from Errors that I will deal with separately. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57979416"
"./core/test/com/google/inject/BinderTest.java","ba5acdf7cf1eef418cfdb463991ff76e7f3ded28","Sat, 5 Oct 2013 14:05:39 -0700","Christian Edward Gruber","Allow turning off stack trace collection in Guice."
"./core/test/com/google/inject/BinderTest.java","2e39ef748a1c4e4dcab506ccfcdb14ca6e01c9c6","Sat, 5 Oct 2013 14:04:53 -0700","Christian Edward Gruber","Print out the modules that led to a binding during error reporting, but only if there's >1 module (otherwise it's just noise).  The format is Some normal messaging about the fact that something terrible happened at <the normal source> (via modules: A -> B -> C)"
"./core/test/com/google/inject/BinderTest.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./core/test/com/google/inject/BinderTest.java","efa4e9f24a309c38c1356fd43eb76fcbca8d975a","Tue, 13 Sep 2011 17:41:32 +0000","guice.mirrorbot@gmail.com","Fix a bug in the way failed JIT bindings are cleaned up.  Because we removed bindings from the jitBindings Map, it was possible for an Injector to try and recreate the failed JIT binding.  Normally we want this behavior.. but in the case of a circular failed JIT binding, it can lead to a ComputationException from ComputingConcurrentHashMap, because we attempt to create two ConstructorInjectors for the same InjectionPoint recursively."
"./core/test/com/google/inject/BinderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BinderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/BinderTest.java","920731718b6f3505cdfeefeabd789539603de18a","Fri, 11 Mar 2011 00:03:01 +0000","sberlin","fix issue 614 -- admittedly not the prettiest solution, but it works."
"./core/test/com/google/inject/BinderTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ImplicitBindingTest.java","efa4e9f24a309c38c1356fd43eb76fcbca8d975a","Tue, 13 Sep 2011 17:41:32 +0000","guice.mirrorbot@gmail.com","Fix a bug in the way failed JIT bindings are cleaned up.  Because we removed bindings from the jitBindings Map, it was possible for an Injector to try and recreate the failed JIT binding.  Normally we want this behavior.. but in the case of a circular failed JIT binding, it can lead to a ComputationException from ComputingConcurrentHashMap, because we attempt to create two ConstructorInjectors for the same InjectionPoint recursively."
"./core/test/com/google/inject/ImplicitBindingTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ImplicitBindingTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/ImplicitBindingTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/ReflectionTest.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./core/test/com/google/inject/ReflectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/ReflectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/BoundProviderTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/RequireAtInjectOnConstructorsTest.java","c756777526309dc6c9ff2b5df80a8f811d390c09","Thu, 31 May 2012 19:54:04 -0400","Sam Berlin","Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors."
"./core/test/com/google/inject/BoundInstanceInjectionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/BoundInstanceInjectionTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/IntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/IntegrationTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/name/NamesTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/name/NamesTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./core/test/com/google/inject/name/NamesTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./core/test/com/google/inject/name/NamedEquivalanceTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./core/test/com/google/inject/name/NamedEquivalanceTest.java","74d714c1e72bb60706ed9df4d1982971c88c10aa","Thu, 21 Oct 2010 19:10:16 +0000","mcculls","Issue 552: (step 1) move core code to its own subdirectory"
"./extensions/grapher/src/com/google/inject/grapher/DefaultNodeCreator.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./extensions/grapher/src/com/google/inject/grapher/DefaultNodeCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/NameFactory.java","2473de5035f6c7064d362175b5de37a0ee829572","Wed, 4 Feb 2009 04:59:10 +0000","phopkins","Improves Grapher's display of names:  - Instances are now rendered with their #toString() if they're not the    default Object implementation.  - String instances are displayed as string literals.  - ProviderMethods are rendered as a method signature.  - Instance sources are now just rendered as the file name and line number."
"./extensions/grapher/src/com/google/inject/grapher/NameFactory.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","03b81a6b931a06c7697e422b218e3734a7f262cc","Wed, 18 Mar 2009 05:34:39 +0000","limpbizkit","Early draft of InjectionListeners."
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","b52a7fd41a6cb67298dcdd2792afb46e0202505a","Wed, 31 Dec 2008 02:19:32 +0000","phopkins","Fixes HasDependency instance cases in the Grapher"
"./extensions/grapher/src/com/google/inject/grapher/TransitiveDependencyVisitor.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/ProviderAliasCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/AbstractInjectorGrapher.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/DefaultEdgeCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/PortIdFactory.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/PortIdFactory.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/CompassPoint.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/NodeShape.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizNode.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/NodeStyle.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizEdge.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/PortIdFactoryImpl.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/ArrowType.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/Graphviz.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/EdgeStyle.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizGrapher.java","647b24f7f1b56174c141f6e7bb91dd8dcf117373","Thu, 10 Apr 2014 19:18:26 -0400","Sam Berlin","Fix external issue 755.  Grapher config was wrong. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64724255"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizGrapher.java","ad6584a0561687394054936e86ae544ea1d57584","Thu, 16 May 2013 07:56:20 -0700","Christian Edward Gruber","Fix issue 663: Grapher is producing corrupt graphs"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizGrapher.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizModule.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/graphviz/GraphvizModule.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/NodeCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/Alias.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/AliasCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/RootKeySetCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","77b81781c7623a40501f92521a29077109cd38f7","Wed, 16 Feb 2011 14:18:38 +0000","sberlin","issue 602 - allow grapher to be rooted at keys.  contributed by bojan, thanks!"
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/InjectorGrapher.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/InterfaceNode.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/InterfaceNode.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/EdgeCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/DefaultRootKeySetCreator.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/ImplementationNode.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/ImplementationNode.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/NodeId.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/DependencyEdge.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/DependencyEdge.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/DependencyEdge.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./extensions/grapher/src/com/google/inject/grapher/DependencyEdge.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/DependencyEdge.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","2bb4771a1835b8a145c857b63bb41ae56e5e6767","Wed, 18 Sep 2013 10:56:54 -0700","Christian Edward Gruber","Exposes ElementSource at getSource() methods. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50645247"
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","2473de5035f6c7064d362175b5de37a0ee829572","Wed, 4 Feb 2009 04:59:10 +0000","phopkins","Improves Grapher's display of names:  - Instances are now rendered with their #toString() if they're not the    default Object implementation.  - String instances are displayed as string literals.  - ProviderMethods are rendered as a method signature.  - Instance sources are now just rendered as the file name and line number."
"./extensions/grapher/src/com/google/inject/grapher/ShortNameFactory.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/Edge.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/Node.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/BindingEdge.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/src/com/google/inject/grapher/BindingEdge.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/src/com/google/inject/grapher/InstanceNode.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/AllTests.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/AllTests.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/AbstractInjectorGrapherTest.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/grapher/test/com/google/inject/grapher/AbstractInjectorGrapherTest.java","45ef01760942b9575a6094effeb4eb034db9a113","Fri, 13 Jan 2012 18:22:35 -0500","Sam Berlin","Cleanup a few things: 1) Remove invalid annotation. 2) Update to Guava 11.0.1, from r9. 3) Remove some unused files. 4) Forcibly keep Throwables, since servlet uses it but core doesn't (so jarjar was wiping it). 5) Disable failing Multibinder test."
"./extensions/grapher/test/com/google/inject/grapher/AbstractInjectorGrapherTest.java","b2f558228f0b812a38a0c2407baf5826b452cb2c","Fri, 13 Jan 2012 18:20:50 -0500","Sam Berlin","Add ServletScopes.isRequestScoped."
"./extensions/grapher/test/com/google/inject/grapher/AbstractInjectorGrapherTest.java","8a539da6824f7e2c43a7dd47df608ec50bf5c987","Fri, 23 Dec 2011 10:19:41 +0000","Stuart McCulloch","Remove @MediumTest annotation since it is not available on the build classpath"
"./extensions/grapher/test/com/google/inject/grapher/AbstractInjectorGrapherTest.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","03b81a6b931a06c7697e422b218e3734a7f262cc","Wed, 18 Mar 2009 05:34:39 +0000","limpbizkit","Early draft of InjectionListeners."
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","b52a7fd41a6cb67298dcdd2792afb46e0202505a","Wed, 31 Dec 2008 02:19:32 +0000","phopkins","Fixes HasDependency instance cases in the Grapher"
"./extensions/grapher/test/com/google/inject/grapher/TransitiveDependencyVisitorTest.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/DanceParty.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/PrivateTestModule.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/demo/BackToTheFutureModule.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Nuclear.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/demo/Nuclear.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Inventor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/demo/Inventor.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/PlutoniumProvider.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Lightning.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/DeLorian.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/demo/DeLorian.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Plutonium.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/DocBrown.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/PinballParts.java","b52a7fd41a6cb67298dcdd2792afb46e0202505a","Wed, 31 Dec 2008 02:19:32 +0000","phopkins","Fixes HasDependency instance cases in the Grapher"
"./extensions/grapher/test/com/google/inject/grapher/demo/PinballParts.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Driver.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/demo/Driver.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Used.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/demo/Used.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/DancePartyImpl.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/AssistedInjectModule.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/demo/AssistedInjectModule.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/MartyMcFly.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/DancePartyFactory.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/InjectorGrapherDemo.java","b71955639ab617e0a4115b1439c8b9982227a018","Fri, 22 Jul 2011 21:14:53 +0000","sberlin","Refactoring of guice-grapher - makes it possible to inject non-scoped graphers - fixes http://code.google.com/p/google-guice/issues/detail?id=489 (in the sense that the exposed node is graphed, it still doesn't follow private bindings) - simplifies implementation classes: - aliasing, node creating and edge creating are done as three independent steps - implementation classes will get aliased nodes so they don't need to worry about aliasing - edges are always created after the nodes they link - removes boilerplate code to build node and edge factories"
"./extensions/grapher/test/com/google/inject/grapher/demo/InjectorGrapherDemo.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/grapher/test/com/google/inject/grapher/demo/InjectorGrapherDemo.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/grapher/test/com/google/inject/grapher/demo/InjectorGrapherDemo.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/EnergySourceProvider.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/MultibinderModule.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/EnergySource.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Person.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/Renewable.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/demo/Renewable.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/demo/FluxCapacitor.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","03b81a6b931a06c7697e422b218e3734a7f262cc","Wed, 18 Mar 2009 05:34:39 +0000","limpbizkit","Early draft of InjectionListeners."
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","2473de5035f6c7064d362175b5de37a0ee829572","Wed, 4 Feb 2009 04:59:10 +0000","phopkins","Improves Grapher's display of names:  - Instances are now rendered with their #toString() if they're not the    default Object implementation.  - String instances are displayed as string literals.  - ProviderMethods are rendered as a method signature.  - Instance sources are now just rendered as the file name and line number."
"./extensions/grapher/test/com/google/inject/grapher/ShortNameFactoryTest.java","aff72e051a38af75e8a6bce59d1a9a4b760d914b","Tue, 30 Dec 2008 21:55:49 +0000","phopkins","Adds Graphviz-based grapher extension"
"./extensions/jmx/src/com/google/inject/tools/jmx/ManagedBindingMBean.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jmx/src/com/google/inject/tools/jmx/Manager.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/jmx/src/com/google/inject/tools/jmx/Manager.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/jmx/src/com/google/inject/tools/jmx/Manager.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jmx/src/com/google/inject/tools/jmx/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/jmx/src/com/google/inject/tools/jmx/package-info.java","484f75f87f526b692f74afdef0e34d2bc6937f0c","Tue, 19 May 2009 18:18:03 +0000","limpbizkit","Adding notes to package-info pointing at the required .jar files. Adding IntelliJ modules for JMX and JNDI. Fixing the broken JNDI build."
"./extensions/jmx/src/com/google/inject/tools/jmx/package-info.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jmx/src/com/google/inject/tools/jmx/ManagedBinding.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jmx/test/com/google/inject/tools/jmx/JmxTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/jmx/test/com/google/inject/tools/jmx/JmxTest.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jndi/src/com/google/inject/jndi/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/jndi/src/com/google/inject/jndi/package-info.java","484f75f87f526b692f74afdef0e34d2bc6937f0c","Tue, 19 May 2009 18:18:03 +0000","limpbizkit","Adding notes to package-info pointing at the required .jar files. Adding IntelliJ modules for JMX and JNDI. Fixing the broken JNDI build."
"./extensions/jndi/src/com/google/inject/jndi/package-info.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/jndi/src/com/google/inject/jndi/JndiIntegration.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/jndi/src/com/google/inject/jndi/JndiIntegration.java","e05f254deb2c8d6d1a2ce1a8a63488ccab8dde1a","Tue, 19 May 2009 00:58:48 +0000","limpbizkit","Moving JNDI and JMX out to extensions/"
"./extensions/testlib/src/com/google/inject/testing/fieldbinder/Bind.java","c7ae433fc9d5bb20115d693743fd2535fd707c4f","Thu, 10 Apr 2014 19:17:37 -0400","Sam Berlin","Add BoundFieldModule to automatically bind @Bind annotated fields to their values, reducing test boilerplate. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64668801"
"./extensions/testlib/src/com/google/inject/testing/fieldbinder/BoundFieldModule.java","332041c67c569a417f128846924a40ea0a7f1a2a","Tue, 1 Jul 2014 16:51:26 -0400","Sam Berlin","Various style cleanups to BoundFieldModule & test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=68018366"
"./extensions/testlib/src/com/google/inject/testing/fieldbinder/BoundFieldModule.java","c7ae433fc9d5bb20115d693743fd2535fd707c4f","Thu, 10 Apr 2014 19:17:37 -0400","Sam Berlin","Add BoundFieldModule to automatically bind @Bind annotated fields to their values, reducing test boilerplate. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64668801"
"./extensions/testlib/test/com/google/inject/testing/fieldbinder/BoundFieldModuleTest.java","332041c67c569a417f128846924a40ea0a7f1a2a","Tue, 1 Jul 2014 16:51:26 -0400","Sam Berlin","Various style cleanups to BoundFieldModule & test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=68018366"
"./extensions/testlib/test/com/google/inject/testing/fieldbinder/BoundFieldModuleTest.java","c7ae433fc9d5bb20115d693743fd2535fd707c4f","Thu, 10 Apr 2014 19:17:37 -0400","Sam Berlin","Add BoundFieldModule to automatically bind @Bind annotated fields to their values, reducing test boilerplate. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64668801"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethod.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethod.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethod.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethod.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethod.java","ba8a4cdebee559cd1b6ad4af2ef9f7f0d82d085d","Sat, 27 Nov 2010 01:56:53 +0000","sberlin@gmail.com","add more tests for @CheckedProvides methods, fix bug exposed with @Exposed methods, cleanup class names & javadoc."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProvider.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProvider.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","f9a3d2db00d29aa3de03da606b1eaeb640947731","Sat, 3 May 2014 00:43:39 -0400","Sam Berlin","Skip synthetic/bridge methods when validating CheckedProvider interfaces, otherwise java8 breaks validation by adding a synthetic bridge default method. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66122172"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","8b7aaecd6164bf576c66dedad8c1988a10396341","Sun, 27 May 2012 13:42:13 -0400","Sam Berlin","Update ThrowingProviderBinder to have a better exception in case of ProvisionExceptions from more than one dependency."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","15dbe7831cdb409f54180a89bfea4d3ce69c4983","Sun, 27 May 2012 13:40:27 -0400","Sam Berlin","Change AssertionError to use the whole ProvisionException as a cause, so we can see exactly what goes wrong when nothing should go wrong."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","e6abeff86010a4456e8b4b2adc800bbffaa13ff7","Sun, 27 May 2012 13:39:59 -0400","Sam Berlin","Change the new ThrowingProviderBinder.providing to look for @ThrowingInject instead of @Inject."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","ba8a4cdebee559cd1b6ad4af2ef9f7f0d82d085d","Sat, 27 Nov 2010 01:56:53 +0000","sberlin@gmail.com","add more tests for @CheckedProvides methods, fix bug exposed with @Exposed methods, cleanup class names & javadoc."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","ee446ca42d2918e8bfee95df2415b6178721347a","Sun, 24 Oct 2010 21:36:39 +0000","sberlin","update ThrowingProvider to support an @ThrowingProvides annotation, much like @Provides.  update the internals of the class to give more explicit error messaging & use bind.addError instead of throwing exceptions.  added lots & lots of tests."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","5ac45a8b2a4624e89e8632fe6771457996c14f77","Sat, 16 Oct 2010 21:38:22 +0000","sberlin","update ThrowingProviders to implement HasDependencies and use getProvider instead of injecting the Injector."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","4994bf6a8e9986ca9013a908c340f019084be30f","Sat, 27 Dec 2008 02:54:59 +0000","limpbizkit","Mikeward's Javadoc fixes. Mike read through all of our Javadoc (thank you!) and found a few typos and simplifications"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","49f67c0f62bc1748dd32e1d86616085231e974e7","Tue, 10 Jun 2008 20:56:17 +0000","limpbizkit","Fixing owner types so they're no longer missing in ThrowingProviderBinder. Also adding the necessary precondition checks so that we always include 'em when necessary."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","1601ae5cc3d7931d4ce4b78e0b493acdd6132ff1","Tue, 3 Jun 2008 22:21:04 +0000","kevinb9n","Adopt latest google collections snapshot (partially); some style cleanup"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","e39d8d86616199a22df068a06202366a57fe30fd","Wed, 26 Mar 2008 07:19:25 +0000","limpbizkit","Unifying unique annotations, used for creating unique keys"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","0197f9d60dc57722f990a3c00fd9a99b9640c0f2","Wed, 26 Mar 2008 07:09:15 +0000","limpbizkit","Fixing a bug in the unique annotation in throwingproviderbinder"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","0c43f22e70bae44bbae09544abc3b322677ac82d","Wed, 19 Dec 2007 01:38:16 +0000","limpbizkit","Javadoc and build file fixes for extensions."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingProviderBinder.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/ThrowingInject.java","e6abeff86010a4456e8b4b2adc800bbffaa13ff7","Sun, 27 May 2012 13:39:59 -0400","Sam Berlin","Change the new ThrowingProviderBinder.providing to look for @ThrowingInject instead of @Inject."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvideUtils.java","e6abeff86010a4456e8b4b2adc800bbffaa13ff7","Sun, 27 May 2012 13:39:59 -0400","Sam Berlin","Change the new ThrowingProviderBinder.providing to look for @ThrowingInject instead of @Inject."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvideUtils.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvides.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvides.java","ba8a4cdebee559cd1b6ad4af2ef9f7f0d82d085d","Sat, 27 Nov 2010 01:56:53 +0000","sberlin@gmail.com","add more tests for @CheckedProvides methods, fix bug exposed with @Exposed methods, cleanup class names & javadoc."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvides.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderWithDependencies.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/package-info.java","484f75f87f526b692f74afdef0e34d2bc6937f0c","Tue, 19 May 2009 18:18:03 +0000","limpbizkit","Adding notes to package-info pointing at the required .jar files. Adding IntelliJ modules for JMX and JNDI. Fixing the broken JNDI build."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/package-info.java","0c43f22e70bae44bbae09544abc3b322677ac82d","Wed, 19 Dec 2007 01:38:16 +0000","limpbizkit","Javadoc and build file fixes for extensions."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java","ba8a4cdebee559cd1b6ad4af2ef9f7f0d82d085d","Sat, 27 Nov 2010 01:56:53 +0000","sberlin@gmail.com","add more tests for @CheckedProvides methods, fix bug exposed with @Exposed methods, cleanup class names & javadoc."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvider.java","6716a71b495e25fb6c499c03ad2d919bedf2ec50","Fri, 19 Nov 2010 02:47:30 +0000","sberlin","a few more @sinces."
"./extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProvider.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/TestScope.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/TestScope.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/ThrowingProviderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/ThrowingProviderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/ThrowingProviderTest.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderMethodsModuleTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderMethodsModuleTest.java","4d93ce63450f6e58c44b0a8ef2143593fc08df86","Sat, 27 Nov 2010 02:05:40 +0000","sberlin@gmail.com","fix license."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderMethodsModuleTest.java","ba8a4cdebee559cd1b6ad4af2ef9f7f0d82d085d","Sat, 27 Nov 2010 01:56:53 +0000","sberlin@gmail.com","add more tests for @CheckedProvides methods, fix bug exposed with @Exposed methods, cleanup class names & javadoc."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","f9a3d2db00d29aa3de03da606b1eaeb640947731","Sat, 3 May 2014 00:43:39 -0400","Sam Berlin","Skip synthetic/bridge methods when validating CheckedProvider interfaces, otherwise java8 breaks validation by adding a synthetic bridge default method. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66122172"
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","8b7aaecd6164bf576c66dedad8c1988a10396341","Sun, 27 May 2012 13:42:13 -0400","Sam Berlin","Update ThrowingProviderBinder to have a better exception in case of ProvisionExceptions from more than one dependency."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","e6abeff86010a4456e8b4b2adc800bbffaa13ff7","Sun, 27 May 2012 13:39:59 -0400","Sam Berlin","Change the new ThrowingProviderBinder.providing to look for @ThrowingInject instead of @Inject."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","8557c775d526e603fa6f2de0fa4f3d840459083e","Thu, 1 Mar 2012 14:21:26 -0500","Sam Berlin","Add a new method to ThrowingProviderBinder: providing(Class) or providing(TypeLiteral). This instructs ThrowingProviderBinder to create a proxy implementation of the CheckedProvider interface and delegate it to the constructor of the class in question.  As a bonus, the class it constructs fully participates in Guice AOP."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/throwingproviders/test/com/google/inject/throwingproviders/CheckedProviderTest.java","488284d6de260e31d14dcd80d8ef7df7a4fb2c22","Wed, 17 Nov 2010 14:27:41 +0000","sberlin","deprecated ThrowingProvider in favor of CheckedProvider, which lets you specify more than one exception type.  remove tentative @ThrowingProvides in favor of @CheckedProvides.  add tests."
"./extensions/servlet/src/com/google/inject/servlet/ServletUtils.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBinding.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/RequestParameters.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/RequestParameters.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBinding.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ScopingException.java","9111f48d5ac9df0504bd0eb702a15eb49383a3dd","Wed, 15 May 2013 13:16:23 -0700","Christian Edward Gruber","Add a ISE exception subclass for scoping exceptions and document when it will be thrown for all the various methods in ServletScopes.java"
"./extensions/servlet/src/com/google/inject/servlet/GuiceServletContextListener.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/GuiceServletContextListener.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/GuiceServletContextListener.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/GuiceServletContextListener.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","9ae3c2d66b23c157c090154b8b9bca839969ef30","Sun, 26 Sep 2010 22:02:00 +0000","sberlin","add toString impls to each servletmodule binding."
"./extensions/servlet/src/com/google/inject/servlet/InstanceFilterBindingImpl.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/RequestScoped.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/RequestScoped.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","9ae3c2d66b23c157c090154b8b9bca839969ef30","Sun, 26 Sep 2010 22:02:00 +0000","sberlin","add toString impls to each servletmodule binding."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBindingImpl.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBinding.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","4a4d8257ed41d8e2be03fd59a6c9dcf00c2379de","Sat, 10 May 2014 10:34:44 -0400","Sam Berlin","Block when transferring request scope instead of checking owners & throwing exceptions.  This lets users delete hacky spin loops."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","c33e73ccd3ca611c26ba823b8fa73fe116dcc926","Mon, 10 Mar 2014 12:50:34 -0400","Sam Berlin","Improve OutOfScopeException so that it tells you which key it was trying to get. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62699406"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","883fe035ae3be076486f2d16b8b8216266f1ad6c","Mon, 10 Mar 2014 12:49:05 -0400","Sam Berlin","Make ServletScopes#scopeRequest slightly more efficient for larger seed maps. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=61542674"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","72460885d36e9a09ff351c0976cb85d6639487c0","Fri, 6 Dec 2013 17:05:17 -0500","Sam Berlin","Fix typo, alertnative -> alternative.  (Issue 777.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57755721"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","5e5e2f552430c3b6e352ef43395b20af8688a90e","Fri, 6 Dec 2013 17:04:18 -0500","Sam Berlin","Don't unnecessarily invoke Key#toString() when running in non-HTTP based RequestScope. Key#toString() is not memoized (unlike hashCode) and these allocations end up being consistently visible in our garbage sampling. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56861670"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","9111f48d5ac9df0504bd0eb702a15eb49383a3dd","Wed, 15 May 2013 13:16:23 -0700","Christian Edward Gruber","Add a ISE exception subclass for scoping exceptions and document when it will be thrown for all the various methods in ServletScopes.java"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","7dc62e5869d6d14744cc717b4a3d02e30fa22f66","Sun, 27 May 2012 13:39:27 -0400","Sam Berlin","Add a new transferRequest method to ServletScopes which propagates all existing scoped objects.   Allows servlet engines to detach & reattach threads (while waiting for a request to receive results from RPCs)."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","04cdfd9c98f6291d57d295767863f0226a6f97b3","Tue, 17 Jan 2012 11:29:38 -0500","Sam Berlin","Remove duplicate code & instead delegate to Scopes.isScoped method."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","b2f558228f0b812a38a0c2407baf5826b452cb2c","Fri, 13 Jan 2012 18:20:50 -0500","Sam Berlin","Add ServletScopes.isRequestScoped."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","05bf8e59221197d8e1b8b04bace4ff5cc34e7336","Tue, 27 Sep 2011 15:37:30 +0000","guice.mirrorbot@gmail.com","Add Scopes.isCircularProxy, for use by Scope implementations.  The basic problem is that somewhere along the line, Guice is breaking the type-safety of <T> in the scope(Key<T>, Provider<T>) method.  This happens when <T> is involved in a circular dependency, and the ConstructionContext creates a circular proxy for a given 'expectedType' of <T> (the type in the parameter where it's being injected).  Expected type is a superclass or superinterface of <T>, not a subclass or subinterface, so if a Scope caches the result of Key<T> -> Provider<T>.get(), and then tries to reuse it, it's possible that we return something that isn't compatible with <T>.  This results in either a ClassCastException (if cglib is involved) or IllegalArgumentException (java reflection) when trying to construct the object, because the parameters don't match the arguments."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","b886ce30c72408d8ed953d2bd525607e8f317b12","Wed, 1 Dec 2010 02:59:06 +0000","sberlin","rm ServletScopes.nullObject -- use a null value in the map to seed a key with null."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","21967867cdfe6dbafabdac79bc3cd5c08e359626","Wed, 24 Nov 2010 14:52:33 +0000","sberlin","allow scopeRequest/continueRequest to seed with a null value, and also type-check the values immediately."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","b8d257487b130e10b4649a73680a9c1649f67a5d","Mon, 20 Sep 2010 18:41:51 +0000","dhanji","Comment wording changed."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","0693a15423ec35824472a79b98983c3113c4da36","Mon, 20 Sep 2010 18:25:29 +0000","dhanji","Support for custom request scopes overloaded onto the @RequestScoped annotation."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","1848a29d323bd4d47581ae92b7551f4f236a3883","Mon, 13 Sep 2010 22:18:14 +0000","dhanji","Early support for thread-continuation of servlet request."
"./extensions/servlet/src/com/google/inject/servlet/ServletScopes.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","1db3e7924216995afc2e042515938b5c93a7416a","Sun, 27 May 2012 13:43:31 -0400","Sam Berlin","Follow-up cleanup CL, removing an unnecessary parameter and strengthening typing."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","997ae129e4a8d6792878ee272688424c577e085a","Sun, 27 May 2012 13:42:56 -0400","Sam Berlin","Reduce stack size and simplify control flow in FilterChainInvocation."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","9afcdd8a24ee225e21c461144b524b3fc55c4033","Mon, 31 Oct 2011 16:34:04 -0400","Sam Berlin","Prune all the billions of c.g.i.servlet.Filter{ChainInvocation,Definition}.doFilter elements from the stack traces."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/FilterChainInvocation.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ScopingOnly.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/src/com/google/inject/servlet/DefaultFilterPipeline.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/DefaultFilterPipeline.java","e5ed5b4fee89bbbe446346f63c52c842c709f733","Wed, 15 May 2013 16:45:21 -0700","Christian Edward Gruber","Add an @Inject constructor to DefaultFilterPipeline so services which depend upon it can be used with Modules.requireAtInjectOnConstructorsModule()"
"./extensions/servlet/src/com/google/inject/servlet/DefaultFilterPipeline.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/src/com/google/inject/servlet/DefaultFilterPipeline.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/DefaultFilterPipeline.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","f1abba38c7f531ec808182579b9d0456b1a00a63","Thu, 10 Apr 2014 19:18:51 -0400","Sam Berlin","On second thought, according to the javadocs @ http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletRequest.html#getPathInfo() .. this is probably more correct, and still better than what it was before. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64726165"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","c35ebc2ce88fa26e1e36fd1eb806c2206ea98f00","Thu, 10 Apr 2014 19:18:01 -0400","Sam Berlin","Fix external issue 372 -- only scrub the pathInfo if the servletPath actually began it (not if it just happens to be longer than the servlet path). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64723867"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","97adab5a1c13e595fb833f3364c60ef972e3fe0d","Thu, 21 Oct 2010 12:35:46 +0000","dhanji","Tentative fix for string index out of bounds exception in issue #560"
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","287355590aa8ad2d87f8ebfac3a0710e3b442c27","Sun, 17 Oct 2010 01:31:25 +0000","sberlin","flip the order of the type parameters in ProviderWithExtensionVisitor to match the order in the BindingTargetVisitor."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleTargetVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleTargetVisitor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleTargetVisitor.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleTargetVisitor.java","e511cf4323be20829e6aa3d2bfbd4de621bbc6f7","Sat, 18 Sep 2010 21:47:34 +0000","sberlin","remove unused imports."
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleTargetVisitor.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/AbstractServletModuleBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/AbstractServletModuleBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/AbstractServletModuleBinding.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","c33e73ccd3ca611c26ba823b8fa73fe116dcc926","Mon, 10 Mar 2014 12:50:34 -0400","Sam Berlin","Improve OutOfScopeException so that it tells you which key it was trying to get. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62699406"
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","2804e19f307e9c23bdd3260b7a3eda1f3d45567f","Thu, 31 May 2012 19:54:44 -0400","Sam Berlin","Add explicit @Inject."
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","0b26f78c3b954ae792e48adb3af49c12c4c4c717","Fri, 9 Sep 2011 21:22:45 +0000","guice.mirrorbot@gmail.com","Make ServletModule work with requireExplicitBinding()."
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","e133f5fecf00b72552b06d3187a8c4526a65bc34","Mon, 23 May 2011 22:08:31 +0000","isaac.q.shum","Make the @RequestParameteters Map derive its values from the existing ServletRequest binding. This makes it easier to construct a seedMap for use with ServletScopes (one only needs to seed the request and response to override the map as well)."
"./extensions/servlet/src/com/google/inject/servlet/InternalServletModule.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/SessionScoped.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/SessionScoped.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleBinding.java","0e9a2c50ddc5ea99c2a5c99591990122e9db91d3","Sat, 13 Nov 2010 14:30:03 +0000","sberlin","add @since tag."
"./extensions/servlet/src/com/google/inject/servlet/ServletModuleBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","99ca2d6dfd9c1f10bc48a0bb4e635144298a6006","Sun, 22 Aug 2010 23:08:21 +0000","sberlin","update parameter names to reflect what they are."
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ServletsModuleBuilder.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternType.java","269f2f69279d2cc4c3859e9dd0c08cb5f24bcc86","Sat, 3 May 2014 00:38:57 -0400","Sam Berlin","Fix issue 379 -- strip the query off the URI when checking to see if the pattern matches.  (We don't need to strip the fragment off because fragments aren't sent to servers.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64996893"
"./extensions/servlet/src/com/google/inject/servlet/UriPatternType.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternType.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternType.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternType.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/servlet/src/com/google/inject/servlet/package-info.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","4a4d8257ed41d8e2be03fd59a6c9dcf00c2379de","Sat, 10 May 2014 10:34:44 -0400","Sam Berlin","Block when transferring request scope instead of checking owners & throwing exceptions.  This lets users delete hacky spin loops."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","c33e73ccd3ca611c26ba823b8fa73fe116dcc926","Mon, 10 Mar 2014 12:50:34 -0400","Sam Berlin","Improve OutOfScopeException so that it tells you which key it was trying to get. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62699406"
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","7dc62e5869d6d14744cc717b4a3d02e30fa22f66","Sun, 27 May 2012 13:39:27 -0400","Sam Berlin","Add a new transferRequest method to ServletScopes which propagates all existing scoped objects.   Allows servlet engines to detach & reattach threads (while waiting for a request to receive results from RPCs)."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","fbbb52dcc92e964b95f389684e87b363f6499173","Sun, 16 Oct 2011 23:33:52 +0000","guice.mirrorbot@gmail.com","fix issue 636, GuiceFilter should keep a strong ref to its logger."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","b405e0417151915b98c3d2033adb9770336a7bbb","Sun, 16 Oct 2011 22:34:21 +0000","guice.mirrorbot@gmail.com","Fix flaky service test.  The whole AsyncService thing probably should just be rm'd, but fixing the test for now."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","fb66c4219616e45fd19a8ccb5e93130d77ef96a3","Sun, 16 Oct 2011 15:55:38 +0000","sberlin","fix issue 636, GuiceFilter should keep a strong ref to its logger."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/GuiceFilter.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternMatcher.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternMatcher.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/UriPatternMatcher.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/UriPatternMatcher.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/UriPatternMatcher.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","3b02622e856e845f9bc5353a494b5ccc75dec40c","Tue, 20 May 2014 20:35:11 -0700","Dhanji R. Prasanna","Snapshot cookies in continuing request to prevent mutation side effects"
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","882330dad166a44b2498c7c13dcab61d853cecdd","Wed, 15 May 2013 18:59:34 -0700","Christian Edward Gruber","HttpServletRequest#getCookies() can return null; checks that in ContinuingHttpServletRequest."
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ContinuingHttpServletRequest.java","1848a29d323bd4d47581ae92b7551f4f236a3883","Mon, 13 Sep 2010 22:18:14 +0000","dhanji","Early support for thread-continuation of servlet request."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","f74ee672186bffc687b2accb911344a7021e7ecf","Tue, 18 Oct 2011 16:43:18 -0400","Sam Berlin","Better errors when using binder(), etc. outside of configure()."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","845fc0e940e320cd177ed4a4f3543c58d6b19283","Thu, 11 Nov 2010 13:15:15 +0000","sberlin","fix @since version."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","2a031c02780b7742090aea2830b421b84867e2ff","Sun, 26 Sep 2010 22:04:09 +0000","sberlin","fix issue 544 -- allow ServletModules to be reused w/o reconstructing new ones.  also fixes a bug where a ServletModule that contained only filters would have run each filter twice if the module was being reused (or three times if it was being used a third time, etc..).  thanks to mathiue.carbou for pointing out the problem."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","99ca2d6dfd9c1f10bc48a0bb4e635144298a6006","Sun, 22 Aug 2010 23:08:21 +0000","sberlin","update parameter names to reflect what they are."
"./extensions/servlet/src/com/google/inject/servlet/ServletModule.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/FilterPipeline.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/FilterPipeline.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/FilterPipeline.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ManagedServletPipeline.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","1db3e7924216995afc2e042515938b5c93a7416a","Sun, 27 May 2012 13:43:31 -0400","Sam Berlin","Follow-up cleanup CL, removing an unnecessary parameter and strengthening typing."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","997ae129e4a8d6792878ee272688424c577e085a","Sun, 27 May 2012 13:42:56 -0400","Sam Berlin","Reduce stack size and simplify control flow in FilterChainInvocation."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","287355590aa8ad2d87f8ebfac3a0710e3b442c27","Sun, 17 Oct 2010 01:31:25 +0000","sberlin","flip the order of the type parameters in ProviderWithExtensionVisitor to match the order in the BindingTargetVisitor."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/FilterDefinition.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","9ae3c2d66b23c157c090154b8b9bca839969ef30","Sun, 26 Sep 2010 22:02:00 +0000","sberlin","add toString impls to each servletmodule binding."
"./extensions/servlet/src/com/google/inject/servlet/LinkedFilterBindingImpl.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","99ca2d6dfd9c1f10bc48a0bb4e635144298a6006","Sun, 22 Aug 2010 23:08:21 +0000","sberlin","update parameter names to reflect what they are."
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/FiltersModuleBuilder.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","9ae3c2d66b23c157c090154b8b9bca839969ef30","Sun, 26 Sep 2010 22:02:00 +0000","sberlin","add toString impls to each servletmodule binding."
"./extensions/servlet/src/com/google/inject/servlet/InstanceServletBindingImpl.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBinding.java","71fe73ed4c6bcccbc6b71be1061435300b195c2f","Sat, 13 Nov 2010 14:28:14 +0000","sberlin","issue 570 & issue 569 -- share a hierarchy for servlet module bindings, expose a method to see if the binding will match against a URI."
"./extensions/servlet/src/com/google/inject/servlet/LinkedServletBinding.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/MultiModuleDispatchIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/MultiModuleDispatchIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/MultiModuleDispatchIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ServletPipelineRequestDispatcherTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/ServletPipelineRequestDispatcherTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletPipelineRequestDispatcherTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletPipelineRequestDispatcherTest.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/ServletPipelineRequestDispatcherTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/InvalidScopeBindingTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/InvalidScopeBindingTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","1db3e7924216995afc2e042515938b5c93a7416a","Sun, 27 May 2012 13:43:31 -0400","Sam Berlin","Follow-up cleanup CL, removing an unnecessary parameter and strengthening typing."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","997ae129e4a8d6792878ee272688424c577e085a","Sun, 27 May 2012 13:42:56 -0400","Sam Berlin","Reduce stack size and simplify control flow in FilterChainInvocation."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/FilterDefinitionTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/AllTests.java","269f2f69279d2cc4c3859e9dd0c08cb5f24bcc86","Sat, 3 May 2014 00:38:57 -0400","Sam Berlin","Fix issue 379 -- strip the query off the URI when checking to see if the pattern matches.  (We don't need to strip the fragment off because fragments aren't sent to servers.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64996893"
"./extensions/servlet/test/com/google/inject/servlet/AllTests.java","882330dad166a44b2498c7c13dcab61d853cecdd","Wed, 15 May 2013 18:59:34 -0700","Christian Edward Gruber","HttpServletRequest#getCookies() can return null; checks that in ContinuingHttpServletRequest."
"./extensions/servlet/test/com/google/inject/servlet/AllTests.java","2a031c02780b7742090aea2830b421b84867e2ff","Sun, 26 Sep 2010 22:04:09 +0000","sberlin","fix issue 544 -- allow ServletModules to be reused w/o reconstructing new ones.  also fixes a bug where a ServletModule that contained only filters would have run each filter twice if the module was being reused (or three times if it was being used a third time, etc..).  thanks to mathiue.carbou for pointing out the problem."
"./extensions/servlet/test/com/google/inject/servlet/AllTests.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/AllTests.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","0c69c36ff97fa83887e75ba567745a5919d4b6ed","Thu, 22 May 2014 09:03:07 -0700","Dhanji R. Prasanna","Fix for build break from servlets patch"
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","0693a15423ec35824472a79b98983c3113c4da36","Mon, 20 Sep 2010 18:25:29 +0000","dhanji","Support for custom request scopes overloaded onto the @RequestScoped annotation."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","10925e44f80f335423f128b107ec176b7436a20b","Tue, 14 Sep 2010 19:16:37 +0000","dhanji","sberlin review for the previous CL."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingRequestIntegrationTest.java","7ebe5f6510e887a3f7d5569dd42874266ede1333","Tue, 14 Sep 2010 15:45:55 +0000","dhanji","More tests for the continuing request idiom."
"./extensions/servlet/test/com/google/inject/servlet/ServletDispatchIntegrationTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/ServletDispatchIntegrationTest.java","269f2f69279d2cc4c3859e9dd0c08cb5f24bcc86","Sat, 3 May 2014 00:38:57 -0400","Sam Berlin","Fix issue 379 -- strip the query off the URI when checking to see if the pattern matches.  (We don't need to strip the fragment off because fragments aren't sent to servers.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64996893"
"./extensions/servlet/test/com/google/inject/servlet/ServletDispatchIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletDispatchIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/ServletDispatchIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/VarargsFilterDispatchIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/VarargsFilterDispatchIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/VarargsFilterDispatchIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/FilterPipelineTest.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/test/com/google/inject/servlet/FilterPipelineTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/FilterPipelineTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/FilterPipelineTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ServletScopesTest.java","b2f558228f0b812a38a0c2407baf5826b452cb2c","Fri, 13 Jan 2012 18:20:50 -0500","Sam Berlin","Add ServletScopes.isRequestScoped."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","f1abba38c7f531ec808182579b9d0456b1a00a63","Thu, 10 Apr 2014 19:18:51 -0400","Sam Berlin","On second thought, according to the javadocs @ http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletRequest.html#getPathInfo() .. this is probably more correct, and still better than what it was before. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64726165"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","c35ebc2ce88fa26e1e36fd1eb806c2206ea98f00","Thu, 10 Apr 2014 19:18:01 -0400","Sam Berlin","Fix external issue 372 -- only scrub the pathInfo if the servletPath actually began it (not if it just happens to be longer than the servlet path). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64723867"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionPathsTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/DummyFilterImpl.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/DummyFilterImpl.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ServletModuleTest.java","8d883444d53d0ce8072490bc2d056ee87f9f547a","Tue, 27 May 2014 14:23:20 -0700","Dhanji R. Prasanna","Test for issue #571"
"./extensions/servlet/test/com/google/inject/servlet/ServletModuleTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletModuleTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/test/com/google/inject/servlet/ServletModuleTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletModuleTest.java","2a031c02780b7742090aea2830b421b84867e2ff","Sun, 26 Sep 2010 22:04:09 +0000","sberlin","fix issue 544 -- allow ServletModules to be reused w/o reconstructing new ones.  also fixes a bug where a ServletModule that contained only filters would have run each filter twice if the module was being reused (or three times if it was being used a third time, etc..).  thanks to mathiue.carbou for pointing out the problem."
"./extensions/servlet/test/com/google/inject/servlet/DummyServlet.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/DummyServlet.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","0b26f78c3b954ae792e48adb3af49c12c4c4c717","Fri, 9 Sep 2011 21:22:45 +0000","guice.mirrorbot@gmail.com","Make ServletModule work with requireExplicitBinding()."
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","a5c13e219224f7c2cbede4b1c787bbd95e62e276","Sat, 13 Nov 2010 14:28:44 +0000","sberlin","simplify servlet SPI test."
"./extensions/servlet/test/com/google/inject/servlet/ServletSpiVisitor.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/ServletDefinitionTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/UriPatternTypeTest.java","269f2f69279d2cc4c3859e9dd0c08cb5f24bcc86","Sat, 3 May 2014 00:38:57 -0400","Sam Berlin","Fix issue 379 -- strip the query off the URI when checking to see if the pattern matches.  (We don't need to strip the fragment off because fragments aren't sent to servers.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64996893"
"./extensions/servlet/test/com/google/inject/servlet/ScopeRequestIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ScopeRequestIntegrationTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ScopeRequestIntegrationTest.java","b886ce30c72408d8ed953d2bd525607e8f317b12","Wed, 1 Dec 2010 02:59:06 +0000","sberlin","rm ServletScopes.nullObject -- use a null value in the map to seed a key with null."
"./extensions/servlet/test/com/google/inject/servlet/ScopeRequestIntegrationTest.java","21967867cdfe6dbafabdac79bc3cd5c08e359626","Wed, 24 Nov 2010 14:52:33 +0000","sberlin","allow scopeRequest/continueRequest to seed with a null value, and also type-check the values immediately."
"./extensions/servlet/test/com/google/inject/servlet/ScopeRequestIntegrationTest.java","0693a15423ec35824472a79b98983c3113c4da36","Mon, 20 Sep 2010 18:25:29 +0000","dhanji","Support for custom request scopes overloaded onto the @RequestScoped annotation."
"./extensions/servlet/test/com/google/inject/servlet/ContextPathTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ContextPathTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/ServletTestUtils.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/test/com/google/inject/servlet/ServletTestUtils.java","9afcdd8a24ee225e21c461144b524b3fc55c4033","Mon, 31 Oct 2011 16:34:04 -0400","Sam Berlin","Prune all the billions of c.g.i.servlet.Filter{ChainInvocation,Definition}.doFilter elements from the stack traces."
"./extensions/servlet/test/com/google/inject/servlet/EdslTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/EdslTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./extensions/servlet/test/com/google/inject/servlet/EdslTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/VarargsServletDispatchIntegrationTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/servlet/test/com/google/inject/servlet/VarargsServletDispatchIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/VarargsServletDispatchIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/VarargsServletDispatchIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/FilterDispatchIntegrationTest.java","fee2d237bd4d6f89ed510861a25d4f3eafa8f1d1","Mon, 31 Oct 2011 16:35:33 -0400","Sam Berlin","Ensure servlets & filters are processed in the correct order in all scenarios. Fix so that code like:"
"./extensions/servlet/test/com/google/inject/servlet/FilterDispatchIntegrationTest.java","9afcdd8a24ee225e21c461144b524b3fc55c4033","Mon, 31 Oct 2011 16:34:04 -0400","Sam Berlin","Prune all the billions of c.g.i.servlet.Filter{ChainInvocation,Definition}.doFilter elements from the stack traces."
"./extensions/servlet/test/com/google/inject/servlet/FilterDispatchIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/FilterDispatchIntegrationTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/FilterDispatchIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ExtensionSpiTest.java","0b26f78c3b954ae792e48adb3af49c12c4c4c717","Fri, 9 Sep 2011 21:22:45 +0000","guice.mirrorbot@gmail.com","Make ServletModule work with requireExplicitBinding()."
"./extensions/servlet/test/com/google/inject/servlet/ExtensionSpiTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ExtensionSpiTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/servlet/test/com/google/inject/servlet/ExtensionSpiTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ExtensionSpiTest.java","b4b7f7209570bd75352eb322825ae79392f03978","Sun, 22 Aug 2010 18:48:23 +0000","sberlin","issue 524 part 2 -- add an SPI to the servlet extension to be able to introspect on its bindings."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","c33e73ccd3ca611c26ba823b8fa73fe116dcc926","Mon, 10 Mar 2014 12:50:34 -0400","Sam Berlin","Improve OutOfScopeException so that it tells you which key it was trying to get. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62699406"
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","9afcdd8a24ee225e21c461144b524b3fc55c4033","Mon, 31 Oct 2011 16:34:04 -0400","Sam Berlin","Prune all the billions of c.g.i.servlet.Filter{ChainInvocation,Definition}.doFilter elements from the stack traces."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","8c92236afd1f02f7ac574bb3df8d92c301067240","Sun, 16 Oct 2011 22:35:11 +0000","guice.mirrorbot@gmail.com","Allow creation of a GuiceFilter that scopes, but does not dispatch to ServletModule-bound servlets / filters."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","e09d8bf14bab27501df1d19462a0542912022f94","Tue, 27 Sep 2011 15:36:19 +0000","guice.mirrorbot@gmail.com","Replace the Request/Response Context after each ServletModule-registered Filter.  This fixes problems where wrapped request/response classes weren't passed to subsequent filters or servlets in the chain."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","ab8f0c607e2c708c2c0bc5a48afc97967aca4ad1","Fri, 9 Sep 2011 21:23:42 +0000","guice.mirrorbot@gmail.com","Clean up ServletTest: use a fake request impl instead of EasyMock."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","5b73df60a81f9317d5e0122b7ff99496615b3d90","Sun, 5 Jun 2011 19:11:21 +0000","sberlin","rm @Override to maintain source compatibility."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","e133f5fecf00b72552b06d3187a8c4526a65bc34","Mon, 23 May 2011 22:08:31 +0000","isaac.q.shum","Make the @RequestParameteters Map derive its values from the existing ServletRequest binding. This makes it easier to construct a seedMap for use with ServletScopes (one only needs to seed the request and response to override the map as well)."
"./extensions/servlet/test/com/google/inject/servlet/ServletTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/InjectedFilterPipelineTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/InjectedFilterPipelineTest.java","4e10dabd5f8aafed91bb849c850e57d89c9911b0","Thu, 24 Mar 2011 13:43:25 +0000","sberlin","issue 418 - make sure servlet extension works with context paths.  thanks to Henning for provided the patches."
"./extensions/servlet/test/com/google/inject/servlet/InjectedFilterPipelineTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/ContinuingHttpServletRequestTest.java","f39b8fdfc5b8d2c1502ac4bfc9601b633284ee07","Wed, 21 May 2014 13:30:59 -0700","Dhanji R. Prasanna","Review comments"
"./extensions/servlet/test/com/google/inject/servlet/ContinuingHttpServletRequestTest.java","3b02622e856e845f9bc5353a494b5ccc75dec40c","Tue, 20 May 2014 20:35:11 -0700","Dhanji R. Prasanna","Snapshot cookies in continuing request to prevent mutation side effects"
"./extensions/servlet/test/com/google/inject/servlet/ContinuingHttpServletRequestTest.java","882330dad166a44b2498c7c13dcab61d853cecdd","Wed, 15 May 2013 18:59:34 -0700","Christian Edward Gruber","HttpServletRequest#getCookies() can return null; checks that in ContinuingHttpServletRequest."
"./extensions/servlet/test/com/google/inject/servlet/MultipleServletInjectorsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/servlet/test/com/google/inject/servlet/MultipleServletInjectorsTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/servlet/test/com/google/inject/servlet/TransferRequestIntegrationTest.java","4a4d8257ed41d8e2be03fd59a6c9dcf00c2379de","Sat, 10 May 2014 10:34:44 -0400","Sam Berlin","Block when transferring request scope instead of checking owners & throwing exceptions.  This lets users delete hacky spin loops."
"./extensions/servlet/test/com/google/inject/servlet/TransferRequestIntegrationTest.java","7dc62e5869d6d14744cc717b4a3d02e30fa22f66","Sun, 27 May 2012 13:39:27 -0400","Sam Berlin","Add a new transferRequest method to ServletScopes which propagates all existing scoped objects.   Allows servlet engines to detach & reattach threads (while waiting for a request to receive results from RPCs)."
"./extensions/servlet/test/com/google/inject/servlet/ServletUtilsTest.java","389cb718a70cd11fdf9c336209246ebcfe944755","Sun, 27 May 2012 13:44:06 -0400","Sam Berlin","Fixed exception in contextpath string manipulation."
"./extensions/service/src/com/google/inject/service/CompositeService.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/service/src/com/google/inject/service/CompositeService.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/service/src/com/google/inject/service/CompositeService.java","4ccf2a3077e701e089cc8d26c831ec493319b37a","Thu, 16 Sep 2010 05:38:18 +0000","dhanji","Minor cleanups, removing some debug stuff that snuck into the previous commit."
"./extensions/service/src/com/google/inject/service/CompositeService.java","65888c01862049c0f7744cf4dfac371ce780fb24","Thu, 16 Sep 2010 05:32:53 +0000","dhanji","Service API extension initial checkin. Support for basic start/stop lifecycle and parallelizing service startup. Needs more integration tests."
"./extensions/service/src/com/google/inject/service/Service.java","65888c01862049c0f7744cf4dfac371ce780fb24","Thu, 16 Sep 2010 05:32:53 +0000","dhanji","Service API extension initial checkin. Support for basic start/stop lifecycle and parallelizing service startup. Needs more integration tests."
"./extensions/service/src/com/google/inject/service/AsyncService.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/service/src/com/google/inject/service/AsyncService.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/service/src/com/google/inject/service/AsyncService.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/service/src/com/google/inject/service/AsyncService.java","4ccf2a3077e701e089cc8d26c831ec493319b37a","Thu, 16 Sep 2010 05:38:18 +0000","dhanji","Minor cleanups, removing some debug stuff that snuck into the previous commit."
"./extensions/service/src/com/google/inject/service/AsyncService.java","65888c01862049c0f7744cf4dfac371ce780fb24","Thu, 16 Sep 2010 05:32:53 +0000","dhanji","Service API extension initial checkin. Support for basic start/stop lifecycle and parallelizing service startup. Needs more integration tests."
"./extensions/service/test/com/google/inject/service/SingleServiceIntegrationTest.java","b405e0417151915b98c3d2033adb9770336a7bbb","Sun, 16 Oct 2011 22:34:21 +0000","guice.mirrorbot@gmail.com","Fix flaky service test.  The whole AsyncService thing probably should just be rm'd, but fixing the test for now."
"./extensions/service/test/com/google/inject/service/SingleServiceIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/service/test/com/google/inject/service/SingleServiceIntegrationTest.java","2ee4f18ea8cd06d0adf45e0c7c771a7806c8195a","Thu, 16 Sep 2010 05:53:17 +0000","dhanji","Fixed a small bug in the async service multi-threaded test."
"./extensions/service/test/com/google/inject/service/SingleServiceIntegrationTest.java","65888c01862049c0f7744cf4dfac371ce780fb24","Thu, 16 Sep 2010 05:32:53 +0000","dhanji","Service API extension initial checkin. Support for basic start/stop lifecycle and parallelizing service startup. Needs more integration tests."
"./extensions/struts2/src/com/google/inject/struts2/GuiceObjectFactory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/struts2/src/com/google/inject/struts2/GuiceObjectFactory.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/src/com/google/inject/struts2/GuiceObjectFactory.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/src/com/google/inject/struts2/GuiceObjectFactory.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","0aecc68d7249454545e6729b1f9e1d6735dbc0e5","Thu, 30 Jun 2011 20:41:17 +0000","sberlin","Re-add a space into the args."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","5a886aad54201f4c607616a76cd37d06e7aad209","Thu, 30 Jun 2011 20:40:10 +0000","sberlin","Minor whitespace tweaks again."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","cf09ab94a983755c987f923cb8477411939f0bb7","Thu, 9 Dec 2010 03:14:07 +0000","sberlin","put generics back in Struts2Factory."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","c1d48f805da2110074ae21c255671cfde51ee6da","Thu, 9 Dec 2010 02:55:58 +0000","sberlin","cleanup struts2 examples/code."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","81a0c602ca592234db6fa778809ed3e74a2f2f80","Thu, 2 Dec 2010 23:50:16 +0000","sberlin@gmail.com","re-add struts2 to build.xml & pom.xml, cleanup compile."
"./extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java","95d0418e28f35c24f065c85ca4cfa1534e6ba4e5","Thu, 2 Dec 2010 23:23:17 +0000","sberlin@gmail.com","changes to the struts2 plugin, by Ben McCann."
"./extensions/struts2/src/com/google/inject/struts2/Struts2GuicePluginModule.java","95d0418e28f35c24f065c85ca4cfa1534e6ba4e5","Thu, 2 Dec 2010 23:23:17 +0000","sberlin@gmail.com","changes to the struts2 plugin, by Ben McCann."
"./extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java","5a886aad54201f4c607616a76cd37d06e7aad209","Thu, 30 Jun 2011 20:40:10 +0000","sberlin","Minor whitespace tweaks again."
"./extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java","95d0418e28f35c24f065c85ca4cfa1534e6ba4e5","Thu, 2 Dec 2010 23:23:17 +0000","sberlin@gmail.com","changes to the struts2 plugin, by Ben McCann."
"./extensions/struts2/example/src/com/google/inject/struts2/example/ExampleListener.java","95d0418e28f35c24f065c85ca4cfa1534e6ba4e5","Thu, 2 Dec 2010 23:23:17 +0000","sberlin@gmail.com","changes to the struts2 plugin, by Ben McCann."
"./extensions/struts2/example/src/com/google/inject/struts2/example/ServiceImpl.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/example/src/com/google/inject/struts2/example/ServiceImpl.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/example/src/com/google/inject/struts2/example/ServiceImpl.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Counter.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Counter.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Counter.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Main.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Main.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Main.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Service.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Service.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Service.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Count.java","12c1a0a5fe7c2399cfffdb74a95493120a85c267","Thu, 2 Dec 2010 23:09:27 +0000","sberlin@gmail.com","Pull back struts2 extension code in preperation for changes to make it better."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Count.java","fcb2b1b9ffc18f79a2203d7088dd55614378e59f","Tue, 23 Nov 2010 01:39:31 +0000","sberlin","discontinue the struts2 extension."
"./extensions/struts2/example/src/com/google/inject/struts2/example/Count.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/mini/src/com/google/inject/mini/MiniGuice.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/mini/src/com/google/inject/mini/MiniGuice.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/mini/src/com/google/inject/mini/MiniGuice.java","71548951a4e4ff431148937b207f18bee8e0e732","Wed, 15 Sep 2010 22:30:59 +0000","limpbizkit@gmail.com","Fix singletons to be eager as intended."
"./extensions/mini/src/com/google/inject/mini/MiniGuice.java","24f5f134bbb7f25055503590e6f9eb4d1b86c5f8","Mon, 13 Sep 2010 07:25:39 +0000","limpbizkit@gmail.com","Remove support for com.google.inject annotations from miniguice. Relying on JSR-330 classes only is simpler, and aligned with the goals for the project."
"./extensions/mini/src/com/google/inject/mini/MiniGuice.java","70248eafa90cd70a68b293763e53f6aec656e73c","Sat, 11 Sep 2010 08:46:08 +0000","limpbizkit@gmail.com","MiniGuice, a proof of concept."
"./extensions/mini/test/com/google/inject/mini/MiniGuiceTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/mini/test/com/google/inject/mini/MiniGuiceTest.java","71548951a4e4ff431148937b207f18bee8e0e732","Wed, 15 Sep 2010 22:30:59 +0000","limpbizkit@gmail.com","Fix singletons to be eager as intended."
"./extensions/mini/test/com/google/inject/mini/MiniGuiceTest.java","24f5f134bbb7f25055503590e6f9eb4d1b86c5f8","Mon, 13 Sep 2010 07:25:39 +0000","limpbizkit@gmail.com","Remove support for com.google.inject annotations from miniguice. Relying on JSR-330 classes only is simpler, and aligned with the goals for the project."
"./extensions/mini/test/com/google/inject/mini/MiniGuiceTest.java","70248eafa90cd70a68b293763e53f6aec656e73c","Sat, 11 Sep 2010 08:46:08 +0000","limpbizkit@gmail.com","MiniGuice, a proof of concept."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","0e896db46024dc7596302f8622276d1c7df02c6b","Wed, 11 Dec 2013 18:40:58 -0500","Sam Berlin","A Message should have only one source but as it is used in Errors, currently it can have multiple sources. The Message objects is returned from two public methods(Elements#getElements() and Errors#getMessages()) that make any changes in its method declarations difficult. As the first step, I am going to remove all calls to the Message constructor that receives multiple sources from []. So, the only calls will be from Errors that I will deal with separately. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57979416"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","3d3a9fa2eba286d8408ea933a28a0dcce6d7f7d1","Fri, 9 Aug 2013 11:07:07 -0700","Christian Edward Gruber","Give more information when duplicate elements are found in a multibound set."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","51829aa27bf05c2c84b6ca90225c61c55c675056","Fri, 9 Aug 2013 11:05:27 -0700","Christian Edward Gruber","Automated g4 rollback of changelist 50265868."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","28c75b267faec7cdc710747bed9ac5f6a3c0c50b","Fri, 9 Aug 2013 11:05:05 -0700","Christian Edward Gruber","Give more information when duplicate elements are found in a multibound set. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50265868"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","21a19670ce07439d616a7a38a9907560eaa6a25d","Sat, 21 Jan 2012 11:06:49 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","c2bee817056d21696eb269287edeb110da90ff24","Wed, 9 Nov 2011 18:47:57 -0500","Sam Berlin","Fix issue 667, cleanup javadoc for Multibinder"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","6542fdb264fdcb205af3318f430228cffb191290","Mon, 25 Oct 2010 03:47:17 +0000","sberlin","issue 553 -- add a mention in the javadoc of MapBinder & Multibinder that the Set & Map are unmodifiable."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","287355590aa8ad2d87f8ebfac3a0710e3b442c27","Sun, 17 Oct 2010 01:31:25 +0000","sberlin","flip the order of the type parameters in ProviderWithExtensionVisitor to match the order in the BindingTargetVisitor."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","aab9eba90f6aa02ad3b87b6746d0cb6a82fe5b23","Sat, 18 Sep 2010 15:11:27 +0000","sberlin","if dependencies aren't calculated for Multibinder yet, return a dependency on Injector.class instead of null."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","f47f05e6fd774a54461105caadeb72dff6ba31a0","Thu, 16 Sep 2010 03:29:29 +0000","sberlin","style cleanups from jessewilson review."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","680c8b527ea94df6161aa9a61f00563338221e64","Fri, 11 Jun 2010 19:11:13 +0000","sberlin","fixes issue 490 -- sets using marker annotations don't work properly all the time."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","8bc8387f63053ac03b609277093a06019c7b18b3","Mon, 26 Apr 2010 02:12:22 +0000","sberlin","issue 297 -- allow Multibinder's dependencies to be retrieved in Stage.TOOL.  also added a failing test for MapBinder & Modules.override (analog to existing failing test in MultibinderTest)."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","0e23eb0505fcf0b4e7c53c26c1ecdb6a18362d2a","Mon, 12 Oct 2009 16:17:34 +0000","limpbizkit","tidy up multibindings doc to specify ordering unsuppress a passing test"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","0efcc6c784a0466ce88f30b70d651476bd7fa5ee","Tue, 7 Jul 2009 20:13:32 +0000","netdpb","Added mutlimap support to MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","136dd75b214b44ee605b08bdd70111d9f3cb41fa","Wed, 24 Jun 2009 01:31:31 +0000","limpbizkit","Fixin' a doc typo"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","398017ae4ed96750fa54dc9ce59dc2f974dcf541","Tue, 23 Jun 2009 06:30:37 +0000","limpbizkit","New API: Multibinder.permitDuplicates() and MapBinder.permitDuplicates()"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","b8a655214c52cdd8012733577ec3b65281c8be66","Sun, 25 Jan 2009 23:26:38 +0000","dhanji","Multilbinder now uses findBindingsByType. Should improve startup performance."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","cfa95ae7f134ffadbdb454dbb731bd9093c6e162","Sun, 30 Nov 2008 19:52:02 +0000","limpbizkit","New type safety for multibindings... I changed the methods to take TypeLiteral<T>s and Class<T>s rather than unsafe Type objects."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","b1f42f5df9c4cd8e157a28c24c4e8eb627a7f052","Wed, 26 Nov 2008 07:44:53 +0000","limpbizkit","Removing the obsolete PrivateModules extension; PrivateModules are now folded-in to core Guice."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","6663d02af7c384ce351a76928d1b6c929224b582","Thu, 19 Jun 2008 07:57:55 +0000","limpbizkit","Axing SourceProviders and SourceProvider in favour of Binder.withSource and Binder.skipSources"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","9532e6267f55105992301add5accfb5c62fdeed8","Wed, 18 Jun 2008 08:20:54 +0000","limpbizkit","Eliminated static from SourceProviders. The new mechanism to specify the source of a binding is like this:   Binder myBinder = binder.withSource(source);"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","3beaaaff52598e849659281fed35dc29a221fac4","Tue, 10 Jun 2008 06:37:12 +0000","limpbizkit","Making Types public for issue 123."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","1601ae5cc3d7931d4ce4b78e0b493acdd6132ff1","Tue, 3 Jun 2008 22:21:04 +0000","kevinb9n","Adopt latest google collections snapshot (partially); some style cleanup"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","eab76471fbc2118a3c07d103d4b5548e153ed9e7","Mon, 26 May 2008 19:45:12 +0000","limpbizkit","A bunch of polish fixes for 2.0:"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","d6967b937274e0e1dab28a196d7aab647c5cc6a4","Fri, 16 May 2008 15:28:51 +0000","limpbizkit","More testcases for multibindings, including some fairly specific tests for toString() on the Binder API"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","e97e15b186baa9fc874eabdf5d293d3f47acebfc","Fri, 16 May 2008 14:53:49 +0000","limpbizkit","Checking in dpb's MapBinder code. This code is a dramatic improvement over the previous rev of MapBinder"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","c913489bebe76fb0b6b430010c69b66164b52b4d","Tue, 13 May 2008 07:23:53 +0000","limpbizkit","Whoops - missed a hashCode problem"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","c75363acf0118de3123ef5e90cd0682562ea2d79","Tue, 13 May 2008 07:16:26 +0000","limpbizkit","Checking in David Baker's MapBinder implementation."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","83b510c924832d38df1a3030e69863098432fffb","Thu, 1 May 2008 20:35:02 +0000","limpbizkit","Fixes from David P Baker's review."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","7c533acbed7ce9c051e847a290dd2060915e91aa","Thu, 1 May 2008 14:17:53 +0000","limpbizkit","There was a pretty horrible bug in Multibinder where collections were checked for annotation but not element type."
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","084e49fb2dad7b5c0ec8ca3367247f5d7163caa6","Thu, 1 May 2008 10:01:47 +0000","limpbizkit","Multibinder needs to be public!"
"./extensions/multibindings/src/com/google/inject/multibindings/Multibinder.java","5019270849439d3aa58bc086a4514d7471716a35","Thu, 1 May 2008 09:55:02 +0000","limpbizkit","New multibindings extension."
"./extensions/multibindings/src/com/google/inject/multibindings/MultibinderBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/src/com/google/inject/multibindings/MultibinderBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/multibindings/src/com/google/inject/multibindings/MultibinderBinding.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/multibindings/src/com/google/inject/multibindings/MultibinderBinding.java","589e44872b23417df569cc0783a82f64d83fa46b","Tue, 5 Oct 2010 03:41:40 +0000","sberlin","convert {@literal<} to &lt;"
"./extensions/multibindings/src/com/google/inject/multibindings/MultibinderBinding.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/MultibindingsTargetVisitor.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/src/com/google/inject/multibindings/MultibindingsTargetVisitor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/multibindings/src/com/google/inject/multibindings/MultibindingsTargetVisitor.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/multibindings/src/com/google/inject/multibindings/MultibindingsTargetVisitor.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinderBinding.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinderBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinderBinding.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinderBinding.java","589e44872b23417df569cc0783a82f64d83fa46b","Tue, 5 Oct 2010 03:41:40 +0000","sberlin","convert {@literal<} to &lt;"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinderBinding.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/OptionalBinderBinding.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/src/com/google/inject/multibindings/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/multibindings/src/com/google/inject/multibindings/package-info.java","484f75f87f526b692f74afdef0e34d2bc6937f0c","Tue, 19 May 2009 18:18:03 +0000","limpbizkit","Adding notes to package-info pointing at the required .jar files. Adding IntelliJ modules for JMX and JNDI. Fixing the broken JNDI build."
"./extensions/multibindings/src/com/google/inject/multibindings/package-info.java","5019270849439d3aa58bc086a4514d7471716a35","Thu, 1 May 2008 09:55:02 +0000","limpbizkit","New multibindings extension."
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","21a19670ce07439d616a7a38a9907560eaa6a25d","Sat, 21 Jan 2012 11:06:49 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","e97e15b186baa9fc874eabdf5d293d3f47acebfc","Fri, 16 May 2008 14:53:49 +0000","limpbizkit","Checking in dpb's MapBinder code. This code is a dramatic improvement over the previous rev of MapBinder"
"./extensions/multibindings/src/com/google/inject/multibindings/Element.java","c75363acf0118de3123ef5e90cd0682562ea2d79","Tue, 13 May 2008 07:16:26 +0000","limpbizkit","Checking in David Baker's MapBinder implementation."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","d1d7ef3de7f3aadc177f311c8ceb06887180a5b1","Tue, 1 Apr 2014 15:10:51 -0700","Christian Edward Gruber","Fix MapBinder's duplicate key error message so that more than one binding with the same source gets listed twice.  This was causing a problem with the tests that turned stack traces off, because the two different bindings line numbers were both changed to "Unknown Source", so it collapsed them into a single item."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","8859456e7c13e83341641fafc8e6f79651161b0f","Mon, 10 Mar 2014 13:58:41 -0400","Sam Berlin","Update MapBinder so it fails on duplicate bindings with a more descriptive error message, including all the keys that had duplicates and where the duplicate bindings were bound.  Example error message that has 'a' bound twice and 'b' bound twice:"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","3338a48b6abb9a0641dc3c2c169bb59b9960dc15","Fri, 6 Dec 2013 17:07:34 -0500","Sam Berlin","Fix issue 734 -- MapBinder doesn't allow injection of Map<K, javax.inject.Provider<V>>. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798745"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","21a19670ce07439d616a7a38a9907560eaa6a25d","Sat, 21 Jan 2012 11:06:49 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","6cf0488ecfd2dc6acaa9ee78fe1b57d1bc07537f","Thu, 16 Jun 2011 20:02:56 +0000","drew.mclaughlin","Remove unnecessary import added in r1555"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","895fa396feac44617bd45d27329d9edcab0447ad","Thu, 16 Jun 2011 20:00:26 +0000","drew.mclaughlin","Implement hashCode and equals for MultimapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","6542fdb264fdcb205af3318f430228cffb191290","Mon, 25 Oct 2010 03:47:17 +0000","sberlin","issue 553 -- add a mention in the javadoc of MapBinder & Multibinder that the Set & Map are unmodifiable."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","287355590aa8ad2d87f8ebfac3a0710e3b442c27","Sun, 17 Oct 2010 01:31:25 +0000","sberlin","flip the order of the type parameters in ProviderWithExtensionVisitor to match the order in the BindingTargetVisitor."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","7bcec8815e3cb9c4f910c4a9024af7a7e664c7a0","Thu, 24 Jun 2010 01:03:26 +0000","sberlin@gmail.com","fixes issue 263 -- introduces ability to "deduplicate" bindings.  all BindingImpl subclasses now implement equals/hashcode properly and duplicates can be erased by throwing them into a set (preferably a LinkedHashSet to preserve the order of the elements).  no new API methods."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","0e23eb0505fcf0b4e7c53c26c1ecdb6a18362d2a","Mon, 12 Oct 2009 16:17:34 +0000","limpbizkit","tidy up multibindings doc to specify ordering unsuppress a passing test"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","ada2f98ef48dc9740dc5e6922743d6f7a1a5cc2c","Mon, 7 Sep 2009 17:40:48 +0000","limpbizkit","Make MapBinder buildable in Java 5. A prior commit accidentally pulled in some Java6isms"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","fb3a896d5e4eef4fcaebdfeb609e939010718788","Wed, 8 Jul 2009 19:49:54 +0000","netdpb","Cleaned up MapBinder code, including using ImmutableSet and ImmutableMap where appropriate. Moved multimap binding into a nested module class."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","0efcc6c784a0466ce88f30b70d651476bd7fa5ee","Tue, 7 Jul 2009 20:13:32 +0000","netdpb","Added mutlimap support to MapBinder."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","398017ae4ed96750fa54dc9ce59dc2f974dcf541","Tue, 23 Jun 2009 06:30:37 +0000","limpbizkit","New API: Multibinder.permitDuplicates() and MapBinder.permitDuplicates()"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","4994bf6a8e9986ca9013a908c340f019084be30f","Sat, 27 Dec 2008 02:54:59 +0000","limpbizkit","Mikeward's Javadoc fixes. Mike read through all of our Javadoc (thank you!) and found a few typos and simplifications"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","cfa95ae7f134ffadbdb454dbb731bd9093c6e162","Sun, 30 Nov 2008 19:52:02 +0000","limpbizkit","New type safety for multibindings... I changed the methods to take TypeLiteral<T>s and Class<T>s rather than unsafe Type objects."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","6663d02af7c384ce351a76928d1b6c929224b582","Thu, 19 Jun 2008 07:57:55 +0000","limpbizkit","Axing SourceProviders and SourceProvider in favour of Binder.withSource and Binder.skipSources"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","9532e6267f55105992301add5accfb5c62fdeed8","Wed, 18 Jun 2008 08:20:54 +0000","limpbizkit","Eliminated static from SourceProviders. The new mechanism to specify the source of a binding is like this:   Binder myBinder = binder.withSource(source);"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","49f67c0f62bc1748dd32e1d86616085231e974e7","Tue, 10 Jun 2008 20:56:17 +0000","limpbizkit","Fixing owner types so they're no longer missing in ThrowingProviderBinder. Also adding the necessary precondition checks so that we always include 'em when necessary."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","3beaaaff52598e849659281fed35dc29a221fac4","Tue, 10 Jun 2008 06:37:12 +0000","limpbizkit","Making Types public for issue 123."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","1601ae5cc3d7931d4ce4b78e0b493acdd6132ff1","Tue, 3 Jun 2008 22:21:04 +0000","kevinb9n","Adopt latest google collections snapshot (partially); some style cleanup"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","eab76471fbc2118a3c07d103d4b5548e153ed9e7","Mon, 26 May 2008 19:45:12 +0000","limpbizkit","A bunch of polish fixes for 2.0:"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","fa86216b3d417a08424a964f5f9e17dded91ce88","Fri, 16 May 2008 15:35:42 +0000","limpbizkit","Giving DPB full credit for authoring the MapBinder code."
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","d6967b937274e0e1dab28a196d7aab647c5cc6a4","Fri, 16 May 2008 15:28:51 +0000","limpbizkit","More testcases for multibindings, including some fairly specific tests for toString() on the Binder API"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","e97e15b186baa9fc874eabdf5d293d3f47acebfc","Fri, 16 May 2008 14:53:49 +0000","limpbizkit","Checking in dpb's MapBinder code. This code is a dramatic improvement over the previous rev of MapBinder"
"./extensions/multibindings/src/com/google/inject/multibindings/MapBinder.java","c75363acf0118de3123ef5e90cd0682562ea2d79","Tue, 13 May 2008 07:16:26 +0000","limpbizkit","Checking in David Baker's MapBinder implementation."
"./extensions/multibindings/src/com/google/inject/multibindings/OptionalBinder.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","88ee52dec9920c95e2f0ed3c43e625872c5d1fd4","Sun, 26 Feb 2012 21:22:30 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","21a19670ce07439d616a7a38a9907560eaa6a25d","Sat, 21 Jan 2012 11:06:49 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","e97e15b186baa9fc874eabdf5d293d3f47acebfc","Fri, 16 May 2008 14:53:49 +0000","limpbizkit","Checking in dpb's MapBinder code. This code is a dramatic improvement over the previous rev of MapBinder"
"./extensions/multibindings/src/com/google/inject/multibindings/RealElement.java","c75363acf0118de3123ef5e90cd0682562ea2d79","Tue, 13 May 2008 07:16:26 +0000","limpbizkit","Checking in David Baker's MapBinder implementation."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","14e2703cd15b0ac745a0df80d25800692d8c727e","Sat, 3 May 2014 00:39:35 -0400","Sam Berlin","Implement hashCode and equals on type returned by Providers.of(...). There doesn't seem to be any reason *not* to provide these methods, and it means downstream code that does"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","96e81ba55441fd11c189d903ee2bd1806a23bd70","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","3d3a9fa2eba286d8408ea933a28a0dcce6d7f7d1","Fri, 9 Aug 2013 11:07:07 -0700","Christian Edward Gruber","Give more information when duplicate elements are found in a multibound set."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","51829aa27bf05c2c84b6ca90225c61c55c675056","Fri, 9 Aug 2013 11:05:27 -0700","Christian Edward Gruber","Automated g4 rollback of changelist 50265868."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","28c75b267faec7cdc710747bed9ac5f6a3c0c50b","Fri, 9 Aug 2013 11:05:05 -0700","Christian Edward Gruber","Give more information when duplicate elements are found in a multibound set. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50265868"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","21a19670ce07439d616a7a38a9907560eaa6a25d","Sat, 21 Jan 2012 11:06:49 -0500","Sam Berlin","Fix issue 670, keep values from MapBinder & Multibinder distinct."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","45ef01760942b9575a6094effeb4eb034db9a113","Fri, 13 Jan 2012 18:22:35 -0500","Sam Berlin","Cleanup a few things: 1) Remove invalid annotation. 2) Update to Guava 11.0.1, from r9. 3) Remove some unused files. 4) Forcibly keep Throwables, since servlet uses it but core doesn't (so jarjar was wiping it). 5) Disable failing Multibinder test."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","e390a0f7070733c9aa7e16f40e56e5a229dfcd97","Fri, 9 Sep 2011 21:26:10 +0000","guice.mirrorbot@gmail.com","Failing test for a multibinder bug reported here: http://groups.google.com/group/google-guice/browse_thread/thread/934e30b7ed0da98f/b90383ad4cd1228c"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","ee443bce9731bb8da1eb60202f68de4c4c298698","Fri, 9 Sep 2011 21:19:11 +0000","guice.mirrorbot@gmail.com","Fix issue 644.  Print a better error message when requestStaticInjection is called on an interface, fix it so that static injection errors show the source of the static injection."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","6585c73bd39373a7ec3613f0bd77e376b118db5f","Tue, 9 Aug 2011 05:44:38 +0000","limpbizkit","Failing test for a multibinder bug reported here: http://groups.google.com/group/google-guice/browse_thread/thread/934e30b7ed0da98f/b90383ad4cd1228c"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","680c8b527ea94df6161aa9a61f00563338221e64","Fri, 11 Jun 2010 19:11:13 +0000","sberlin","fixes issue 490 -- sets using marker annotations don't work properly all the time."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","34d2f00eee00ba170c3dffa72154399b830a67a6","Sun, 2 May 2010 20:11:28 +0000","sberlin","add two more failing tests for Map/Multibinder -- permitDuplicates should be allowable through Module.overrides calls."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","8bc8387f63053ac03b609277093a06019c7b18b3","Mon, 26 Apr 2010 02:12:22 +0000","sberlin","issue 297 -- allow Multibinder's dependencies to be retrieved in Stage.TOOL.  also added a failing test for MapBinder & Modules.override (analog to existing failing test in MultibinderTest)."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","d8750fdcd8a32d0e6caaa2919414a479acbd1bb6","Mon, 10 Aug 2009 23:30:46 +0000","limpbizkit","some test fixes for ScopeChecker and Multibinder"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","398017ae4ed96750fa54dc9ce59dc2f974dcf541","Tue, 23 Jun 2009 06:30:37 +0000","limpbizkit","New API: Multibinder.permitDuplicates() and MapBinder.permitDuplicates()"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","63a9605ee0b3190071c38ce7ada836cbbb9d2864","Mon, 30 Mar 2009 17:28:16 +0000","limpbizkit","Test cases that prove we have reliable iteration order for Multibinder and MapBinder"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","a6e0e787c546a1d5e82861b5c851ca09e3bbfd06","Wed, 3 Sep 2008 06:19:56 +0000","limpbizkit","Moving error sources so they're now reported in the same place for configuration errors and runtime errors. This means that instead of seeing this:   1) Error at com.google.Foo.class(Foo.java:123)       No constructor for Foo was found"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","9532e6267f55105992301add5accfb5c62fdeed8","Wed, 18 Jun 2008 08:20:54 +0000","limpbizkit","Eliminated static from SourceProviders. The new mechanism to specify the source of a binding is like this:   Binder myBinder = binder.withSource(source);"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","49f67c0f62bc1748dd32e1d86616085231e974e7","Tue, 10 Jun 2008 20:56:17 +0000","limpbizkit","Fixing owner types so they're no longer missing in ThrowingProviderBinder. Also adding the necessary precondition checks so that we always include 'em when necessary."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","eab76471fbc2118a3c07d103d4b5548e153ed9e7","Mon, 26 May 2008 19:45:12 +0000","limpbizkit","A bunch of polish fixes for 2.0:"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","d6967b937274e0e1dab28a196d7aab647c5cc6a4","Fri, 16 May 2008 15:28:51 +0000","limpbizkit","More testcases for multibindings, including some fairly specific tests for toString() on the Binder API"
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","83b510c924832d38df1a3030e69863098432fffb","Thu, 1 May 2008 20:35:02 +0000","limpbizkit","Fixes from David P Baker's review."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","7c533acbed7ce9c051e847a290dd2060915e91aa","Thu, 1 May 2008 14:17:53 +0000","limpbizkit","There was a pretty horrible bug in Multibinder where collections were checked for annotation but not element type."
"./extensions/multibindings/test/com/google/inject/multibindings/MultibinderTest.java","5019270849439d3aa58bc086a4514d7471716a35","Thu, 1 May 2008 09:55:02 +0000","limpbizkit","New multibindings extension."
"./extensions/multibindings/test/com/google/inject/multibindings/AllTests.java","cc8870bfca3dc44f669322d3f6dabf4a55f025ce","Tue, 1 Apr 2014 15:08:53 -0700","Christian Edward Gruber","Add OptionalBinderTest into multibindings AllTests. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63966263"
"./extensions/multibindings/test/com/google/inject/multibindings/AllTests.java","08861260a770d93ab35bbfa1bac573ca64e8cd37","Tue, 13 May 2008 07:22:11 +0000","limpbizkit","AllTests for multi- and map binders"
"./extensions/multibindings/test/com/google/inject/multibindings/WeakKeySetUtils.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./extensions/multibindings/test/com/google/inject/multibindings/WeakKeySetUtils.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./extensions/multibindings/test/com/google/inject/multibindings/WeakKeySetUtils.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","8ad60eb50961e000c89099bb767489cf551d995b","Mon, 10 Mar 2014 12:49:46 -0400","Sam Berlin","Change LinkedBindingBuilder.toProvider(Provider) to accept a jsr330 provider, in addition to the Guice Provider.  This is an incompatible change for people who extend LinkedBindingBuilder, but not for people who use it."
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","3338a48b6abb9a0641dc3c2c169bb59b9960dc15","Fri, 6 Dec 2013 17:07:34 -0500","Sam Berlin","Fix issue 734 -- MapBinder doesn't allow injection of Map<K, javax.inject.Provider<V>>. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798745"
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","bf2b16c06a5ff7c099fe60f9a46cfb130ce45962","Wed, 15 May 2013 18:39:15 -0700","Christian Edward Gruber","Add support for ProvisionListeners to notify on toInstance & constant bindings."
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/multibindings/test/com/google/inject/multibindings/SpiUtils.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/test/com/google/inject/multibindings/Collector.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/test/com/google/inject/multibindings/Collector.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/multibindings/test/com/google/inject/multibindings/OptionalBinderTest.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./extensions/multibindings/test/com/google/inject/multibindings/OptionalBinderTest.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./extensions/multibindings/test/com/google/inject/multibindings/OptionalBinderTest.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./extensions/multibindings/test/com/google/inject/multibindings/OptionalBinderTest.java","af24f632f90fc91daeb30172b874405c131592c8","Tue, 1 Apr 2014 15:07:55 -0700","Christian Edward Gruber","Adds a new OptionalBinder.  OptionalBinder allows frameworks to setup bindings for items that user code may or may not bind.  It also allows frameworks to set default values that users can override."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","d57f8ece5508afc66c4768396c54b412dc9f2cc2","Tue, 8 Apr 2014 12:25:33 -0400","Sam Berlin","The bug in the test that became flaky has been fixed. Note that this is not a strict rollback of the rollback - I've added protection against the NPE that would happen if there's a GC between the isBlacklisted call and the getSources call."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","c013facb2aa0af03206fd1af2d8314f6a414ec98","Tue, 8 Apr 2014 12:24:55 -0400","Sam Berlin","*** Reason for rollback ***"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","bab9b6082ff7c3aefac2dc8c7de0468fe60fe8f6","Tue, 1 Apr 2014 15:09:53 -0700","Christian Edward Gruber","Enhance WeakKeySet to auto evict keys and avoid calling toString on Keys."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","cade897b45ffe5d9d4e48ae7009cf74d8a91e335","Tue, 1 Apr 2014 15:07:02 -0700","Christian Edward Gruber","Preparations for OptionalBinder.  This fixes MapBinder's SPI so elements from different MapBinders are distinct, and also fixes ProviderLookup's Provider so it exposes its dependency, which allows MapBinder to properly find its dependencies. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63811558"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","8859456e7c13e83341641fafc8e6f79651161b0f","Mon, 10 Mar 2014 13:58:41 -0400","Sam Berlin","Update MapBinder so it fails on duplicate bindings with a more descriptive error message, including all the keys that had duplicates and where the duplicate bindings were bound.  Example error message that has 'a' bound twice and 'b' bound twice:"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","3338a48b6abb9a0641dc3c2c169bb59b9960dc15","Fri, 6 Dec 2013 17:07:34 -0500","Sam Berlin","Fix issue 734 -- MapBinder doesn't allow injection of Map<K, javax.inject.Provider<V>>. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57798745"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","6c69bcf53d4122b0f05f44783c0d8a61afd83911","Wed, 18 Sep 2013 10:55:21 -0700","Christian Edward Gruber","An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50556753"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","895fa396feac44617bd45d27329d9edcab0447ad","Thu, 16 Jun 2011 20:00:26 +0000","drew.mclaughlin","Implement hashCode and equals for MultimapBinder."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","75fcf6f3a7ae2000b8ed85038dfd33bedd0503fa","Mon, 20 Sep 2010 00:42:24 +0000","sberlin","issue 539 - extension SPI for Multibinder/MapBinder."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","680c8b527ea94df6161aa9a61f00563338221e64","Fri, 11 Jun 2010 19:11:13 +0000","sberlin","fixes issue 490 -- sets using marker annotations don't work properly all the time."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","34d2f00eee00ba170c3dffa72154399b830a67a6","Sun, 2 May 2010 20:11:28 +0000","sberlin","add two more failing tests for Map/Multibinder -- permitDuplicates should be allowable through Module.overrides calls."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","8bc8387f63053ac03b609277093a06019c7b18b3","Mon, 26 Apr 2010 02:12:22 +0000","sberlin","issue 297 -- allow Multibinder's dependencies to be retrieved in Stage.TOOL.  also added a failing test for MapBinder & Modules.override (analog to existing failing test in MultibinderTest)."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","0efcc6c784a0466ce88f30b70d651476bd7fa5ee","Tue, 7 Jul 2009 20:13:32 +0000","netdpb","Added mutlimap support to MapBinder."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","398017ae4ed96750fa54dc9ce59dc2f974dcf541","Tue, 23 Jun 2009 06:30:37 +0000","limpbizkit","New API: Multibinder.permitDuplicates() and MapBinder.permitDuplicates()"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","63a9605ee0b3190071c38ce7ada836cbbb9d2864","Mon, 30 Mar 2009 17:28:16 +0000","limpbizkit","Test cases that prove we have reliable iteration order for Multibinder and MapBinder"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","a6e0e787c546a1d5e82861b5c851ca09e3bbfd06","Wed, 3 Sep 2008 06:19:56 +0000","limpbizkit","Moving error sources so they're now reported in the same place for configuration errors and runtime errors. This means that instead of seeing this:   1) Error at com.google.Foo.class(Foo.java:123)       No constructor for Foo was found"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","9532e6267f55105992301add5accfb5c62fdeed8","Wed, 18 Jun 2008 08:20:54 +0000","limpbizkit","Eliminated static from SourceProviders. The new mechanism to specify the source of a binding is like this:   Binder myBinder = binder.withSource(source);"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","49f67c0f62bc1748dd32e1d86616085231e974e7","Tue, 10 Jun 2008 20:56:17 +0000","limpbizkit","Fixing owner types so they're no longer missing in ThrowingProviderBinder. Also adding the necessary precondition checks so that we always include 'em when necessary."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","eab76471fbc2118a3c07d103d4b5548e153ed9e7","Mon, 26 May 2008 19:45:12 +0000","limpbizkit","A bunch of polish fixes for 2.0:"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","fa86216b3d417a08424a964f5f9e17dded91ce88","Fri, 16 May 2008 15:35:42 +0000","limpbizkit","Giving DPB full credit for authoring the MapBinder code."
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","d6967b937274e0e1dab28a196d7aab647c5cc6a4","Fri, 16 May 2008 15:28:51 +0000","limpbizkit","More testcases for multibindings, including some fairly specific tests for toString() on the Binder API"
"./extensions/multibindings/test/com/google/inject/multibindings/MapBinderTest.java","c75363acf0118de3123ef5e90cd0682562ea2d79","Tue, 13 May 2008 07:16:26 +0000","limpbizkit","Checking in David Baker's MapBinder implementation."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","405828baafef04878c8b5bd57f90a9740bbef4a6","Sun, 6 Feb 2011 17:59:07 +0000","sberlin","issues 592 & 591, documentation updates."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","fdd95007ad6f2ef60e57c174c546f5c7678cb714","Wed, 3 Nov 2010 13:08:56 +0000","sberlin","made new classes final."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","b5a75ed3c72d772e7dc9f771a63b3e7226695919","Sat, 31 Jul 2010 16:08:27 +0000","sberlin","issue 506 - fail fast & with a useful error message when an AssistedInject factory has Provider<T> as a factory type.  patch ( slightly modified) by ffaber."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","88f9a14dc9fa9f6704f8a86e376b7f218e492f98","Sat, 17 Jul 2010 16:39:00 +0000","sberlin@gmail.com","remove confusing behavior from assistedinject -- it used to allow factory creations to be resolved by the injector if the return key matched something in the injector.  now it always creates new objects.  the prior behavior created a scenario where, if the following pseudo-code was used..."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","3748e4a0979e6332ab9f0a3601ab5b8e595b7a12","Sun, 23 May 2010 13:40:06 +0000","sberlin","issue 329 - cleanup error message for under-specified assistedinject factory."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","b5ec94a953eb64b773e56658f50e728f47519288","Sat, 27 Mar 2010 20:36:13 +0000","sberlin","patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","02d505cd72ebdfe2ccfce560969797c4b00f2bc2","Wed, 19 Aug 2009 18:41:12 +0000","netdpb","Fixed typo in documentation."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","6840fcbcaaf1dda6b1eb387b1b7811599a69eaa5","Wed, 19 Aug 2009 18:31:04 +0000","limpbizkit","Jesse's tweaks to aragos' patch r1063. His patch was quite well implemented and these changes are mostly pedantic."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryModuleBuilder.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","87aea1b0c3c1c8689468c8e7d89d128f15e8030a","Tue, 2 Feb 2010 04:55:45 +0000","isaac.q.shum","Fix for assisted inject bug introduced in r1120."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","2cd3f72da00e059a8ed2828809ab6b5924af4daf","Tue, 20 Oct 2009 08:02:21 +0000","dhanji","fix for locking problem in old assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","365f83483b550d95bae2f90bc16439d24713a124","Mon, 7 Sep 2009 21:00:57 +0000","limpbizkit","First effort at support for JSR 330."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","490833fc8ae416f1dcd35e3ba7a3f2ca4332158d","Sun, 2 Nov 2008 00:12:39 +0000","limpbizkit","Cleaning up exceptions and Javadoc:"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","9dc32d4b6df8725f009a93f51e410564a362ccf0","Sun, 15 Jun 2008 11:29:10 +0000","limpbizkit","Massive refactoring to exception handling. I'm trying to simplify things, but they are currently a little bit more complicated. I'll do another round shortly."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","c0fe03bcd4190d756ade1466f8a8d713a82b7124","Mon, 2 Jun 2008 04:46:53 +0000","limpbizkit","Key now wraps primitive types. This is a big deal. The consequence is that this test now passes:   assertEquals(Integer.class(), Key.get(int.class).getRawType());"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","5741fb895ce5a930d575eaf27703ff3af10c4646","Mon, 18 Feb 2008 21:04:53 +0000","limpbizkit","Patching in David Baker's fix for AssistedInject - now it works with implicit bindings"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","5b257347fc51038043060a2f8dbc16c3973a5ab4","Fri, 27 Feb 2009 23:47:39 +0000","limpbizkit","Misc small changes. Fix for bug 341, and tweaking assisted inject Javadoc."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","03c8d26382eaadbb4f32e17a6c976ad24c3247e4","Tue, 2 Dec 2008 06:15:57 +0000","limpbizkit","AssistedInject Deluxe."
"./extensions/assistedinject/src/com/google/inject/assistedinject/Assisted.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","f7ac6ea677ccfff6c3bec7db1d3621e6b6cf4097","Sun, 9 May 2010 12:48:24 +0000","sberlin","Patches to let Guice be more OSGi (and classloader) friendly.  Solves issue 439, issue 337, issue 443, and issue 343.  All provided by Stuart McCulloch.  Many thanks, Stuart!"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","b5ec94a953eb64b773e56658f50e728f47519288","Sat, 27 Mar 2010 20:36:13 +0000","sberlin","patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","6840fcbcaaf1dda6b1eb387b1b7811599a69eaa5","Wed, 19 Aug 2009 18:31:04 +0000","limpbizkit","Jesse's tweaks to aragos' patch r1063. His patch was quite well implemented and these changes are mostly pedantic."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","9b584e3594557c7e16ab5428a3c5a0d29bcf6e02","Sat, 16 May 2009 16:57:38 +0000","limpbizkit","Added a note on Nullable to assistedinject"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","5b257347fc51038043060a2f8dbc16c3973a5ab4","Fri, 27 Feb 2009 23:47:39 +0000","limpbizkit","Misc small changes. Fix for bug 341, and tweaking assisted inject Javadoc."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","f9e26582d812805fdb56e775e11b6fd1dec8dc2c","Tue, 9 Dec 2008 18:45:13 +0000","limpbizkit","Applying Daniel Martin's fixes for our test cases."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","b206d2088149087461f3c417ad7a9d56108f628a","Tue, 2 Dec 2008 06:16:53 +0000","limpbizkit","Removed old Javadocs."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","b1f42f5df9c4cd8e157a28c24c4e8eb627a7f052","Wed, 26 Nov 2008 07:44:53 +0000","limpbizkit","Removing the obsolete PrivateModules extension; PrivateModules are now folded-in to core Guice."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","cb93c79d6a5431f7708f5aaf46d83494ee037070","Mon, 29 Sep 2008 18:24:45 +0000","limpbizkit","jmourits' changes to assistedinject so toString() etc. on the proxies work. Previously they were blowing up with NPEs in some situations."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","5741fb895ce5a930d575eaf27703ff3af10c4646","Mon, 18 Feb 2008 21:04:53 +0000","limpbizkit","Patching in David Baker's fix for AssistedInject - now it works with implicit bindings"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","0c43f22e70bae44bbae09544abc3b322677ac82d","Wed, 19 Dec 2007 01:38:16 +0000","limpbizkit","Javadoc and build file fixes for extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectBinding.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectBinding.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectBinding.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","8f196358f5a494f974a741b5a982f96f03171223","Thu, 16 May 2013 11:13:21 -0700","Christian Edward Gruber","Add logging for when AssistedInject falls into non-optimized mode, so people can take action and fix it."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","9f8b438b370a688cd393983abf29aa00344795a4","Thu, 16 May 2013 11:06:08 -0700","Christian Edward Gruber","Use a single UniqueAnnotation instead of creating a new one each time."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","45d86df69be98dc64a455e397ae6c492f803771e","Wed, 15 May 2013 19:11:47 -0700","Christian Edward Gruber","Fix http://code.google.com/p/google-guice/issues/detail?id=742 by having assistedinject fail if the target implementation class has a scop ing annotation on it.  Scope annotations on assistedinject targets were always ignored by Guice, and allowing them on the classes led to lots of confusion when reading code.  The new behavior makes for much more readable code."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","23cf2d4f4944389bd0d9a9dc9ac9a1bcbce5584f","Sat, 29 Jan 2011 20:42:22 +0000","sberlin","fix issue 594 -- assistedinject does the wrong thing if assisted type is scoped."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","2ef22666df8b6f32425edb45e56ec60c9ab5b7ba","Mon, 25 Oct 2010 02:57:48 +0000","sberlin","issue 428 - better error validation for AssistedInject, specifically with public factories & non-public method return types that can lead to IllegalAccessErrors."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","287355590aa8ad2d87f8ebfac3a0710e3b442c27","Sun, 17 Oct 2010 01:31:25 +0000","sberlin","flip the order of the type parameters in ProviderWithExtensionVisitor to match the order in the BindingTargetVisitor."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","b199afd5c1da15c2bc8a9f223a8d0b7b6266aa1d","Thu, 23 Sep 2010 03:16:22 +0000","sberlin","new AssistedInject factories now implement HasDependencies (like the old assistedinject factories)"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","b5a75ed3c72d772e7dc9f771a63b3e7226695919","Sat, 31 Jul 2010 16:08:27 +0000","sberlin","issue 506 - fail fast & with a useful error message when an AssistedInject factory has Provider<T> as a factory type.  patch ( slightly modified) by ffaber."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","88f9a14dc9fa9f6704f8a86e376b7f218e492f98","Sat, 17 Jul 2010 16:39:00 +0000","sberlin@gmail.com","remove confusing behavior from assistedinject -- it used to allow factory creations to be resolved by the injector if the return key matched something in the injector.  now it always creates new objects.  the prior behavior created a scenario where, if the following pseudo-code was used..."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","3748e4a0979e6332ab9f0a3601ab5b8e595b7a12","Sun, 23 May 2010 13:40:06 +0000","sberlin","issue 329 - cleanup error message for under-specified assistedinject factory."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","af9a4df94a042856eacd99e9ce4dcdf4cd6eb5dd","Mon, 10 May 2010 22:11:37 +0000","sberlin","fixes issue 478."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","f7ac6ea677ccfff6c3bec7db1d3621e6b6cf4097","Sun, 9 May 2010 12:48:24 +0000","sberlin","Patches to let Guice be more OSGi (and classloader) friendly.  Solves issue 439, issue 337, issue 443, and issue 343.  All provided by Stuart McCulloch.  Many thanks, Stuart!"
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","b5ec94a953eb64b773e56658f50e728f47519288","Sat, 27 Mar 2010 20:36:13 +0000","sberlin","patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","141f800c09d66898ce04c7684330e1e9dc8a31ab","Thu, 25 Mar 2010 03:37:35 +0000","sberlin","optimize assistedinject - touches on issue 435 - it is now about ~4x faster than the old style assisted inject (instead of being ~15x slower than it).  the optimization only applies if the assisted objects do not inject an Injector or a Provider of an assisted key."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","97c2271b505bec77f509e1f190695cc6a2997427","Fri, 5 Feb 2010 21:12:05 +0000","sberlin","issue 454 - add an annotation to mark @Injectable methods as wanting injection during Stage.TOOL."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","6840fcbcaaf1dda6b1eb387b1b7811599a69eaa5","Wed, 19 Aug 2009 18:31:04 +0000","limpbizkit","Jesse's tweaks to aragos' patch r1063. His patch was quite well implemented and these changes are mostly pedantic."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","6840fcbcaaf1dda6b1eb387b1b7811599a69eaa5","Wed, 19 Aug 2009 18:31:04 +0000","limpbizkit","Jesse's tweaks to aragos' patch r1063. His patch was quite well implemented and these changes are mostly pedantic."
"./extensions/assistedinject/src/com/google/inject/assistedinject/BindingCollector.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/assistedinject/src/com/google/inject/assistedinject/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/assistedinject/src/com/google/inject/assistedinject/package-info.java","484f75f87f526b692f74afdef0e34d2bc6937f0c","Tue, 19 May 2009 18:18:03 +0000","limpbizkit","Adding notes to package-info pointing at the required .jar files. Adding IntelliJ modules for JMX and JNDI. Fixing the broken JNDI build."
"./extensions/assistedinject/src/com/google/inject/assistedinject/package-info.java","0c43f22e70bae44bbae09544abc3b322677ac82d","Wed, 19 Dec 2007 01:38:16 +0000","limpbizkit","Javadoc and build file fixes for extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","b5ec94a953eb64b773e56658f50e728f47519288","Sat, 27 Mar 2010 20:36:13 +0000","sberlin","patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","4994bf6a8e9986ca9013a908c340f019084be30f","Sat, 27 Dec 2008 02:54:59 +0000","limpbizkit","Mikeward's Javadoc fixes. Mike read through all of our Javadoc (thank you!) and found a few typos and simplifications"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInject.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedMethod.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedMethod.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedMethod.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/src/com/google/inject/assistedinject/ParameterListKey.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/src/com/google/inject/assistedinject/ParameterListKey.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/src/com/google/inject/assistedinject/ParameterListKey.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectTargetVisitor.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectTargetVisitor.java","c13b5454a5cfa7d188e9a047017ac0de63ec4dfb","Sun, 31 Oct 2010 18:38:24 +0000","sberlin","adding more missing @since 3.0 tags."
"./extensions/assistedinject/src/com/google/inject/assistedinject/AssistedInjectTargetVisitor.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","53664a7f17492bd0c3c4728df61679147907dd18","Sat, 21 Feb 2009 00:25:27 +0000","limpbizkit","Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","ddb3862415e078080293abba05f1a24a921c007c","Mon, 29 Dec 2008 05:21:16 +0000","limpbizkit","Supporting HasDependencies for Multibinder, MapBinder and AssistedInject v1."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","fcbdf999a15039ecad6157c1bf44a835df826a27","Wed, 26 Nov 2008 02:37:35 +0000","limpbizkit","Pretty massive rewrite of PrivateModules so that they're now implemented in core Guice."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","72d11dd102eeebf081aa5363469d28b25f9b1384","Sun, 2 Nov 2008 07:59:13 +0000","limpbizkit","Taking advantage of the error message changes in some extensions."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","cb93c79d6a5431f7708f5aaf46d83494ee037070","Mon, 29 Sep 2008 18:24:45 +0000","limpbizkit","jmourits' changes to assistedinject so toString() etc. on the proxies work. Previously they were blowing up with NPEs in some situations."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","9532e6267f55105992301add5accfb5c62fdeed8","Wed, 18 Jun 2008 08:20:54 +0000","limpbizkit","Eliminated static from SourceProviders. The new mechanism to specify the source of a binding is like this:   Binder myBinder = binder.withSource(source);"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","c0fe03bcd4190d756ade1466f8a8d713a82b7124","Mon, 2 Jun 2008 04:46:53 +0000","limpbizkit","Key now wraps primitive types. This is a big deal. The consequence is that this test now passes:   assertEquals(Integer.class(), Key.get(int.class).getRawType());"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","eab76471fbc2118a3c07d103d4b5548e153ed9e7","Mon, 26 May 2008 19:45:12 +0000","limpbizkit","A bunch of polish fixes for 2.0:"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","6c0feb5d0da0876a4d131106312e0664045bff1b","Mon, 18 Feb 2008 21:11:00 +0000","limpbizkit","Patching in David Baker's fix for AssistedInject - now it works with implicit bindings"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","5741fb895ce5a930d575eaf27703ff3af10c4646","Mon, 18 Feb 2008 21:04:53 +0000","limpbizkit","Patching in David Baker's fix for AssistedInject - now it works with implicit bindings"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProviderTest.java","e451ef79c95a19a0e8044567f133f0ad1a40f4bc","Wed, 19 Dec 2007 01:15:59 +0000","limpbizkit","Adding AssistedInject and ThrowingProviders as Guice extensions."
"./extensions/assistedinject/test/com/google/inject/assistedinject/ManyConstructorsTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/assistedinject/test/com/google/inject/assistedinject/ManyConstructorsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/test/com/google/inject/assistedinject/ManyConstructorsTest.java","b5ec94a953eb64b773e56658f50e728f47519288","Sat, 27 Mar 2010 20:36:13 +0000","sberlin","patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","20dd9afe0aa02f92cb642bc0c88f920799e6a7c5","Sat, 3 May 2014 00:42:08 -0400","Sam Berlin","Automated rollback."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","615f61f109f39b81f1c87b70b24080c578f00c04","Sat, 3 May 2014 00:41:38 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","e39158525475eca7971966c667494d240be7e242","Thu, 16 May 2013 11:00:54 -0700","Christian Edward Gruber","Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:   @Retention(RUNTIME)   @BindingAnnotation @interface AllDefaults {     int hasDefault() default 1;   }"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","cd12655357bce1ff37a9609d4c6d493fb59c0e0e","Sun, 27 May 2012 13:38:30 -0400","Sam Berlin","Don't assume methods will be in order when asserting error messages."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","2ef22666df8b6f32425edb45e56ec60c9ab5b7ba","Mon, 25 Oct 2010 02:57:48 +0000","sberlin","issue 428 - better error validation for AssistedInject, specifically with public factories & non-public method return types that can lead to IllegalAccessErrors."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","b5a75ed3c72d772e7dc9f771a63b3e7226695919","Sat, 31 Jul 2010 16:08:27 +0000","sberlin","issue 506 - fail fast & with a useful error message when an AssistedInject factory has Provider<T> as a factory type.  patch ( slightly modified) by ffaber."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","141f800c09d66898ce04c7684330e1e9dc8a31ab","Thu, 25 Mar 2010 03:37:35 +0000","sberlin","optimize assistedinject - touches on issue 435 - it is now about ~4x faster than the old style assisted inject (instead of being ~15x slower than it).  the optimization only applies if the assisted objects do not inject an Injector or a Provider of an assisted key."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","97c2271b505bec77f509e1f190695cc6a2997427","Fri, 5 Feb 2010 21:12:05 +0000","sberlin","issue 454 - add an annotation to mark @Injectable methods as wanting injection during Stage.TOOL."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","9d6b656e0526d6d2d85c0223a1f5f70544766298","Fri, 27 Feb 2009 21:59:15 +0000","limpbizkit","Applying ilya.firman's patch for issue 218. I tweaked the patch to use TypeLiteral's new type resolution methods like TypeLiteral.getReturnType(Method) etc., which makes it so we always just do-the-right-thing for matching type variables."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","4f6274aa4a306efa727f9b37ad16ea3d331d22f0","Thu, 19 Feb 2009 21:57:55 +0000","limpbizkit","Removing all ASM and cglib dependencies from the no_aop build of Guice."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","bf0d876bb767f45c5cfbed3929e2cf6acd7d061a","Thu, 19 Feb 2009 09:06:22 +0000","limpbizkit","Removing all references to method interceptors from the non-AOPified Guice. This passes the full Guice test suite (other than the interceptor tests that are removed, and the tests that fail in the normal Guice build)."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","02d991800cbd1467256b45e81a1b1f6c278a3a54","Wed, 10 Dec 2008 03:47:57 +0000","limpbizkit","Applying dtm's suggestions for r723."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryProvider2Test.java","2d633cd04273a80a31c920f24fc1d3c5f1f8e7df","Tue, 9 Dec 2008 06:26:00 +0000","limpbizkit","Big API change to AssistedInject Deluxe."
"./extensions/assistedinject/test/com/google/inject/assistedinject/ExtensionSpiTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/test/com/google/inject/assistedinject/ExtensionSpiTest.java","4e11457f34addf5d10fe0c31cefd54c75c37b540","Tue, 28 Jun 2011 23:50:03 +0000","sberlin","fixup whitespace"
"./extensions/assistedinject/test/com/google/inject/assistedinject/ExtensionSpiTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/test/com/google/inject/assistedinject/ExtensionSpiTest.java","4b91955979afbbfff317b36af89b6bd1a1aa9b47","Sun, 17 Oct 2010 01:28:06 +0000","sberlin","patch from ramakrishna (with very minor changes from me) for an extension SPI for assisted inject."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","a23bc0e97c2a45f47b55e1cb9a7edb0d41c2ef76","Sat, 3 May 2014 00:42:39 -0400","Sam Berlin","Implement hashCode and equals in FactoryProvider/FactoryProvider2, with the aim of allowing Guice to dedupe bindings. Reroll of earlier change with a bug fixed. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=65611245"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","45d86df69be98dc64a455e397ae6c492f803771e","Wed, 15 May 2013 19:11:47 -0700","Christian Edward Gruber","Fix http://code.google.com/p/google-guice/issues/detail?id=742 by having assistedinject fail if the target implementation class has a scop ing annotation on it.  Scope annotations on assistedinject targets were always ignored by Guice, and allowing them on the classes led to lots of confusion when reading code.  The new behavior makes for much more readable code."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","94c2d2c6c53cef4785413575ca445a048414641e","Wed, 15 May 2013 19:05:25 -0700","Christian Edward Gruber","Suppress a warning in advance that will be a run-time error in Guice in a subsequent commit, and which will be added to error-prone and caught at compile-time for those who use it."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","23cf2d4f4944389bd0d9a9dc9ac9a1bcbce5584f","Sat, 29 Jan 2011 20:42:22 +0000","sberlin","fix issue 594 -- assistedinject does the wrong thing if assisted type is scoped."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","2ef22666df8b6f32425edb45e56ec60c9ab5b7ba","Mon, 25 Oct 2010 02:57:48 +0000","sberlin","issue 428 - better error validation for AssistedInject, specifically with public factories & non-public method return types that can lead to IllegalAccessErrors."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","b199afd5c1da15c2bc8a9f223a8d0b7b6266aa1d","Thu, 23 Sep 2010 03:16:22 +0000","sberlin","new AssistedInject factories now implement HasDependencies (like the old assistedinject factories)"
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","88f9a14dc9fa9f6704f8a86e376b7f218e492f98","Sat, 17 Jul 2010 16:39:00 +0000","sberlin@gmail.com","remove confusing behavior from assistedinject -- it used to allow factory creations to be resolved by the injector if the return key matched something in the injector.  now it always creates new objects.  the prior behavior created a scenario where, if the following pseudo-code was used..."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","3748e4a0979e6332ab9f0a3601ab5b8e595b7a12","Sun, 23 May 2010 13:40:06 +0000","sberlin","issue 329 - cleanup error message for under-specified assistedinject factory."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","af9a4df94a042856eacd99e9ce4dcdf4cd6eb5dd","Mon, 10 May 2010 22:11:37 +0000","sberlin","fixes issue 478."
"./extensions/assistedinject/test/com/google/inject/assistedinject/FactoryModuleBuilderTest.java","c1e65da70833eadebf37a37b559ce81536c30288","Wed, 19 Aug 2009 18:18:16 +0000","limpbizkit","aragos' four-month old patch for issue 346, wherein he adds FactoryModuleBuilder."
"./extensions/spring/src/com/google/inject/spring/SpringIntegration.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/spring/src/com/google/inject/spring/SpringIntegration.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/spring/src/com/google/inject/spring/SpringIntegration.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/spring/src/com/google/inject/spring/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/spring/src/com/google/inject/spring/package-info.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/spring/test/com/google/inject/spring/SpringIntegrationTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/spring/test/com/google/inject/spring/SpringIntegrationTest.java","f8537eaaaf67e36af7469b392a4941e425459991","Sat, 21 Aug 2010 23:50:30 +0000","sberlin","move extensions that weren't under extensions/ into that directory.  simplify paths so everything is uniform for extensions."
"./extensions/persist/src/com/google/inject/persist/Transactional.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/Transactional.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/src/com/google/inject/persist/Transactional.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/UnitOfWork.java","9e2d95b4393bd41b7eb882705d208124e2a4dd18","Wed, 26 Jun 2013 17:43:11 -0700","Christian Edward Gruber","Clean up some formatting (includes some format artifacts from internal changes), and remove executable bit from several files which do not need them."
"./extensions/persist/src/com/google/inject/persist/UnitOfWork.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/UnitOfWork.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/src/com/google/inject/persist/UnitOfWork.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/src/com/google/inject/persist/UnitOfWork.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/PersistFilter.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/PersistFilter.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/PersistFilter.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/package-info.java","5f47cccea9a8b18a2bb3f76a8ba219dd85ff47cc","Fri, 19 Nov 2010 02:59:20 +0000","sberlin","change period to semicolon show javadoc shows it in the one-liner for package infos."
"./extensions/persist/src/com/google/inject/persist/package-info.java","103af50f397108411009d5304dfbde64a3be4a42","Mon, 25 Oct 2010 03:42:09 +0000","sberlin","update extension package-info.java files to reference 3.0 instead of 2.0, also fix issue 563 -- assistedinject package-info referenced the wrong jar name."
"./extensions/persist/src/com/google/inject/persist/package-info.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/package-info.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/PersistService.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/persist/src/com/google/inject/persist/PersistService.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/persist/src/com/google/inject/persist/PersistService.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","8468bab932287b8faf6e31ef2795958745e0eb60","Wed, 29 Dec 2010 02:12:56 +0000","dhanji","Fix for issues 581 and 582"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaFinderProxy.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","8d7338e181e8467fd7b91f30d3ffc48711c86e2d","Thu, 21 Oct 2010 21:22:23 +0000","mcculls","Current build targets Java5 but String.isEmpty() is Java6 only, so change this check to use String.length() instead"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistModule.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistService.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistService.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistService.java","d9c913acca55023ef5d76a32c3d4a51ee6b420cb","Sun, 26 Jun 2011 21:02:54 +0000","sberlin","switch Guice from manually repackaging Guava to depending on Guava.  it's still jarjar'd right now, which is causing a ~400k increase in guice-snapshot.jar.  next step is to switch to ProGuard to remove the unnecessary code and cut it back down (even further?!).  this will let people build from Guice source and depend directly on Guava code without having to worry about hiding internal/util."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistService.java","6f0aee697724288e42823393d700ea770fd69da5","Wed, 27 Oct 2010 02:03:52 +0000","sberlin","move @nullable to internal.util"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaPersistService.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/package-info.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/package-info.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/jpa/Jpa.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/jpa/Jpa.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","10f305d9d4328edd2819396dcbf039e86e8e24b1","Mon, 10 Mar 2014 12:51:17 -0400","Sam Berlin","This change removes final from fields annotated with @Inject.  In addition to being discouraged due to weak semantics [1], it is incompatible with the standard javax.inject.Inject annotation [2]."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","ec76179f50f9d8c340b311c6b019c00526566b66","Wed, 29 Jun 2011 22:04:31 +0000","sberlin","Restore usernames"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","a23937e0145d7bb4cc0c2169d21023bedee3fdb2","Wed, 29 Jun 2011 22:02:50 +0000","sberlin","Minor whitespace & temporary username changes"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","4b862691c0e6500d120ecbcdc93f343f59a107a2","Tue, 28 Jun 2011 23:24:58 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/src/com/google/inject/persist/jpa/JpaLocalTxnInterceptor.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/finder/package-info.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/finder/package-info.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/finder/Finder.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/finder/Finder.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/src/com/google/inject/persist/finder/Finder.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/finder/Finder.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/finder/FirstResult.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/finder/FirstResult.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/finder/FirstResult.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/src/com/google/inject/persist/finder/FirstResult.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/src/com/google/inject/persist/finder/FirstResult.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/finder/DynamicFinder.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/src/com/google/inject/persist/finder/DynamicFinder.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/finder/DynamicFinder.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/src/com/google/inject/persist/finder/DynamicFinder.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/src/com/google/inject/persist/finder/MaxResults.java","81007ff876fda8d376e0ad988edb51c118baf68e","Tue, 28 Jun 2011 23:27:09 +0000","sberlin","fixup whitespace"
"./extensions/persist/src/com/google/inject/persist/finder/MaxResults.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/finder/MaxResults.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/src/com/google/inject/persist/finder/MaxResults.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","65814e62fc11868188217108f158719d35696134","Mon, 14 Feb 2011 01:12:20 +0000","sberlin","issue 595 -- persist extension didn't work if @Transacation was on the class, thanks to cgdecker for the patch and bug report!"
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","3bdf721ed546315c59098407798b722d20b959b2","Thu, 9 Dec 2010 03:57:44 +0000","sberlin","fix for NO_AOP build."
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","9a227bef3b82a045323ef2cf38ec60b2e42cf0fe","Sat, 3 Jul 2010 15:51:31 +0000","limpbizkit@gmail.com","Move internal utility code to separate package."
"./extensions/persist/src/com/google/inject/persist/PersistModule.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/AllTests.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/AllTests.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerPerRequestProvisionTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsConfidenceTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsConfidenceTest.java","01758ced7b1ad09957c3daa0449b41f00c05d9e7","Tue, 28 Jun 2011 23:20:25 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsConfidenceTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsConfidenceTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsConfidenceTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerProvisionTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsWithCustomMatcherTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsWithCustomMatcherTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsWithCustomMatcherTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsWithCustomMatcherTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsWithCustomMatcherTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JpaParentTestEntity.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaParentTestEntity.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaParentTestEntity.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/DynamicFinderTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/persist/test/com/google/inject/persist/jpa/DynamicFinderTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/DynamicFinderTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/DynamicFinderTest.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManualLocalTransactionsTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","65814e62fc11868188217108f158719d35696134","Mon, 14 Feb 2011 01:12:20 +0000","sberlin","issue 595 -- persist extension didn't work if @Transacation was on the class, thanks to cgdecker for the patch and bug report!"
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","cf481fae214d56a92f37d65a93e6050cf77412e4","Mon, 5 Jul 2010 10:22:06 +0000","dhanji","Guice-persist limpbizkit's review cleanups."
"./extensions/persist/test/com/google/inject/persist/jpa/ClassLevelManagedLocalTransactionsTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","c00df28be8bfa45b2bdc8b4d3c101c20a9cbdc12","Tue, 1 Jul 2014 16:53:41 -0400","Sam Berlin","Automated code cleanups by internal tool. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69390543"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/EntityManagerFactoryProvisionTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/jpa/JpaWorkManagerTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsAcrossRequestTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsAcrossRequestTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsAcrossRequestTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsAcrossRequestTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/ManagedLocalTransactionsAcrossRequestTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/CustomPropsEntityManagerFactoryProvisionTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/jpa/CustomPropsEntityManagerFactoryProvisionTest.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/CustomPropsEntityManagerFactoryProvisionTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/jpa/CustomPropsEntityManagerFactoryProvisionTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/jpa/CustomPropsEntityManagerFactoryProvisionTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/jpa/JpaTestEntity.java","7855aca14b1130e04b695f85c08e7b20867129f7","Tue, 28 Jun 2011 23:33:57 +0000","sberlin","fixup whitespace"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaTestEntity.java","150d2a9b62030f48b5cf770e42be1b12c61d983f","Sun, 12 Sep 2010 17:04:50 +0000","dhanji","Dynamic finders fixed and test added. Probably want a few more tests and early-error checking to be ideal, but otherwise working as advertised. =)"
"./extensions/persist/test/com/google/inject/persist/jpa/JpaTestEntity.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","3236b100a95b739577dfcd117c24615370a1d0af","Thu, 13 Feb 2014 10:37:24 -0800","Christian Edward Gruber","Replace guava 11 with 16 and extract Guava as a separate dependency."
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","b7a02b02d81c830d148355c90bc309bcd66fb592","Fri, 8 Jul 2011 00:34:16 +0000","sberlin","* Remove unused imports * Sort imports * Convert tabs to spaces * Fix the ant no_aop build"
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","8b64d455b982d5841480a0247c15d68de0759c91","Mon, 13 Dec 2010 02:44:36 +0000","sberlin","Remove InjectorBuilder in favor of methods in Binder."
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","8a02fce17b86eae8aa55b794a0338946fd30b32d","Sun, 12 Sep 2010 16:05:06 +0000","dhanji","Final cleanup of Persist Module. Pending a sanity check of the dynamic finder API, it is now ready to ship for Guice 3!"
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","1d58f43826787fa40f66e216f11afe4f4d154843","Thu, 9 Sep 2010 12:01:54 +0000","dhanji","Complete reworking of the guice-persist module and API. It is MUCH leaner now and easily facilitates multiple modules. All legacy tests are still passing."
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","a9cdba080f423565f183ebd680dac7242d549b15","Sun, 15 Aug 2010 05:25:02 +0000","dhanji","Fixes many persist tests to use Junit assertXXX rather than JDK assert statements. Also cleans up some of the persist javadoc."
"./extensions/persist/test/com/google/inject/persist/EdslTest.java","0391e964363bf98fdbe737723c4a7fdc05c3ffc3","Tue, 25 May 2010 22:48:47 +0000","dhanji","Initial checkin, Guice-Persist (Supports JPA only). All tests passing."
"./examples/src/example/xml/FromFlash.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/XmlBeanModule.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/FromSim.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/Contact.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/SimCard.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/Main.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/Contacts.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/FlashMemory.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
"./examples/src/example/xml/Phone.java","c112063529baac332325fde0f2616e04dd073aee","Thu, 5 Feb 2009 06:23:52 +0000","crazyboblee","Added XML example."
